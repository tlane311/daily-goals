[{"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\index.js":"1","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\dummy-data.js":"2","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\task\\task.js":"3","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\sticky\\Sticky.js":"4","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\app.js":"5","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\stickies-bar\\StickiesBar.js":"6","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\details-bar\\DetailsBar.js":"7","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\hooks\\useAPI.js":"8"},{"size":133,"mtime":1615407378066,"results":"9","hashOfConfig":"10"},{"size":578,"mtime":1614370485921,"results":"11","hashOfConfig":"10"},{"size":1219,"mtime":1615494777304,"results":"12","hashOfConfig":"10"},{"size":1557,"mtime":1615492359525,"results":"13","hashOfConfig":"10"},{"size":4864,"mtime":1616264264865,"results":"14","hashOfConfig":"10"},{"size":876,"mtime":1615565661985,"results":"15","hashOfConfig":"10"},{"size":2184,"mtime":1615499384892,"results":"16","hashOfConfig":"10"},{"size":1541,"mtime":1615689304478,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1xhtpyq",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"20"},"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\index.js",[],["38","39"],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\dummy-data.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\task\\task.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\sticky\\Sticky.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\app.js",["40","41","42","43","44","45"],"import React, {useState} from 'react';\r\n\r\nimport Sticky from './sticky/Sticky.js';\r\nimport {homeworkColumn, choresColumn} from './dummy-data.js';\r\nimport StickiesBar from './stickies-bar/StickiesBar.js';\r\nimport DetailsBar from './details-bar/DetailsBar.js';\r\n\r\n\r\nimport useApi from '../hooks/useAPI.js';\r\n\r\n//Column-View displays only a few Columns at a time. Columns hold Tasks.\r\n//Individual Column data is help in a database and passed to the child components here.\r\n//Column-View will allow for alternative views: 1.Carousel, 2.Drop Down\r\n//In Column-View, we will be able to add new tasks and create new Columns\r\n\r\nexport default function App(){\r\n    /*\r\n    Our data will be stored in a db. Ideally, we would like to query the database as few times as possible. If we query once, we will pull an array of columns. When we update these columns, react doesn't rerender; react fails to rerender because of the deeper shape of the array of columns. We introduce an artificial forceUpdate function to force rerenders.\r\n    \r\n    An alternative to this is to have ColumnView pass an id number to each child Column. Then, each Column will query the database for the column data. The downside is we query the database multiple times.\r\n    */\r\n    \r\n    \r\n\r\n//\r\n    const {data, response, error, isLoading, fetch} = useApi({\r\n        \"method\":\"GET\",\r\n        \"url\":\"localhost:4000/api/me\",\r\n        \"headers\":{\r\n        \"content-type\":\"application/octet-stream\",\r\n        \"x-rapidapi-host\":\"currency-exchange.p.rapidapi.com\",\r\n        \"x-rapidapi-key\":\"08670f6036msh087f2b8073d8296p1956a9jsn2560793564ed\",\r\n        \"useQueryString\":true\r\n        }\r\n    });\r\n\r\n\r\n\r\n\r\n    const [, updateState] = React.useState();\r\n    const forceUpdate = React.useCallback(() => updateState({}), []);\r\n\r\n\r\n\r\n\r\n\r\n\r\n    //the columns will come from a db query\r\n    const [stickies, setStickies] = useState([homeworkColumn, choresColumn]);\r\n     \r\n    const [nextID, setNextID] = useState(stickies.length);\r\n    const [newStickyName, setNewStickyName] = useState(\"\"); //this state handles the new column input\r\n\r\n\r\n    //this function creates a new column data object\r\n    \r\n    const createNewSticky = (name) =>{\r\n        const oldID = nextID;\r\n        setNextID(oldID+1);\r\n        return {\r\n            id:oldID,\r\n            name: name,\r\n            entries: []\r\n        }\r\n\r\n    }\r\n\r\n    //this callback is for the onClick\r\n    const handleCreateNewSticky = e => {\r\n        if (!newStickyName) return;\r\n        const newSticky = createNewSticky(newStickyName);\r\n        const newStickyArray = stickies.concat(newSticky);\r\n        setStickies(newStickyArray);\r\n        setNewStickyName(\"\");\r\n    }\r\n\r\n\r\n    //this method updates state whenever you add a new entry\r\n    const updateEntries = (columnID,data)=>{\r\n        if (!data) return;\r\n        const newEntries = stickies[columnID].entries.concat({\r\n            name:data,\r\n            completed:false\r\n        })\r\n        const updatedSticky = stickies[columnID];\r\n        updatedSticky.entries = newEntries;\r\n        \r\n        const newStickies = stickies;\r\n        newStickies[columnID] = updatedSticky;\r\n        setStickies(newStickies);\r\n        forceUpdate(); //necessary for react to rerender\r\n    }\r\n    const updateTask = (columnID, taskID, newStatus)=>{\r\n        const newStickies = stickies;\r\n        newStickies[columnID].entries[taskID].completed=newStatus\r\n        setStickies(newStickies);\r\n        forceUpdate();\r\n    }\r\n    //asd\r\n    const deleteTask = (columnID, taskID)=>{\r\n        const newStickies = stickies\r\n        newStickies[columnID].entries= newStickies[columnID].entries.filter( (element,index) => index!==taskID);\r\n        setStickies(newStickies);\r\n        forceUpdate();\r\n    }\r\n\r\n    const deleteSticky = (columnID) =>{\r\n        const newStickies = stickies;\r\n        setStickies(newStickies.filter( (ele, index) => index!==columnID))\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <StickiesBar listOfStickies={[\"Today\", \"Important\", \"Goals\", \"Chores\"]} visibility={1}/>\r\n            \r\n            {stickies.filter( (ele, index) => index===0).map((column,index) => \r\n                    <Sticky\r\n                        name={column.name} \r\n                        id={index}\r\n                        entries={column.entries} \r\n                        updateEntries={updateEntries}\r\n                        updateTask={updateTask}\r\n                        deleteTask={deleteTask}\r\n                        deleteColumn={deleteSticky}\r\n                    />)}\r\n            {/* <input type=\"text\" value={newStickyName} onChange={ e => {\r\n                setNewStickyName(e.target.value);\r\n            }}/>\r\n            \r\n            <button onClick={handleCreateNewSticky}> Create New Column </button>\r\n            */}\r\n            <DetailsBar goal={'test'} visibility={1}/>\r\n        </>\r\n\r\n    )\r\n}","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\stickies-bar\\StickiesBar.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\details-bar\\DetailsBar.js",["46"],"import \"../../component-styles/details-bar.css\";\r\nimport {useState} from 'react';\r\n\r\n//all props passed from App\r\n//goal is just the text for the goal\r\n//deadline (usually not going to appear)\r\n//note is extra text to go with the goal\r\n//highlight is just the highlighter color\r\n//handleUpdate will update the state in app which will update the db thru the API\r\n\r\nexport default function DetailsBar({goal, deadline, note, highlight, handleUpdate, visibility}){\r\n    // have to create state for each of the four options\r\n    // have to create state to show when each of the boxes is selected\r\n    // have to set up routine for when to handleUpdate\r\n\r\n    return (\r\n        <div\r\n            id=\"details-bar\" \r\n            className={\r\n                visibility\r\n                    ? \"component-shown\"\r\n                    : \"component-hidden\"\r\n            }\r\n        >\r\n            <div className=\"detail\" id=\"goal-box\"> <GoalBox goal={goal}/> </div>\r\n            <div className=\"detail\"> <DeadlineBox deadline={deadline}/> </div>\r\n            <div className=\"detail\" id=\"note-box\"> <NoteBox note={note}/> </div>\r\n            <div className=\"detail\"> <HighlightBox highlight={highlight}/> </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nfunction GoalBox({goal}){\r\n    return (\r\n        <>  \r\n            <label>\r\n                <input type=\"checkbox\" />\r\n                <span\r\n                    className=\"status-box\">\r\n                </span>\r\n                <input type=\"text\" placeholder={goal}/>\r\n            </label>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nfunction DeadlineBox({deadline}){\r\n    return (<>\r\n        <label>Deadline</label>\r\n        <input type=\"datetime-local\" value={deadline}/>\r\n    </>)\r\n}\r\n\r\nfunction NoteBox({note}){\r\n    return(\r\n        <>\r\n            <label>Note</label>\r\n            <textarea value={note} placeholder=\"Leave a note for your task\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nfunction HighlightBox({highlight}){\r\n    return(\r\n        <>  <label> Highlight Color</label>\r\n            <select>\r\n                <option> Red </option>  \r\n                <option> Green </option>  \r\n                <option> Orange </option>  \r\n            </select>\r\n        </>\r\n    )\r\n}","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\hooks\\useAPI.js",["47"],"import {useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\nimport hash from 'hash-object';\r\nconst CancelToken = axios.CancelToken;\r\n\r\n\r\n//this hook will allow us so streamline interacting with a rest api\r\n\r\n/*\r\nreturns\r\n    result, response, error, isLoading, fetch\r\n*/\r\n\r\nexport default function useRestAPI(config, initialFetch=true){\r\n    console.log('useApi ran')\r\n    const [state, updateState] = useState({\r\n        response: undefined,\r\n        error: undefined,\r\n        isLoading: true\r\n    })\r\n\r\n    const configHash = hash(config);\r\n\r\n    const source = CancelToken.source();\r\n\r\n    function fetch(){\r\n        axios({\r\n            ...config, \r\n            cancelToken: source.token,\r\n            })\r\n        .then( res => {\r\n            updateState({ error: undefined, response: res, isLoading: false});\r\n        })\r\n        .catch( err => {\r\n            if (axios.isCancel(err)){\r\n                console.log('Request canceled by cleanup: ', err.message);\r\n            } else {\r\n                updateState({error: err, response: undefined, isLoading: false});\r\n            }\r\n        });\r\n    }\r\n\r\n    useEffect( () => {\r\n        updateState({...state, isLoading: true});\r\n\r\n        if (initialFetch){\r\n            fetch();\r\n        }\r\n\r\n        return () => {\r\n            source.cancel('useEffect cleanup.');\r\n        }\r\n\r\n    }, [configHash]);\r\n\r\n    const { response, error, isLoading} = state;\r\n\r\n    const data = response ? response.data : undefined;\r\n    return { data, response, error, isLoading, fetch };\r\n}",{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":26,"column":12,"nodeType":"54","messageId":"55","endLine":26,"endColumn":16},{"ruleId":"52","severity":1,"message":"56","line":26,"column":18,"nodeType":"54","messageId":"55","endLine":26,"endColumn":26},{"ruleId":"52","severity":1,"message":"57","line":26,"column":28,"nodeType":"54","messageId":"55","endLine":26,"endColumn":33},{"ruleId":"52","severity":1,"message":"58","line":26,"column":35,"nodeType":"54","messageId":"55","endLine":26,"endColumn":44},{"ruleId":"52","severity":1,"message":"59","line":26,"column":46,"nodeType":"54","messageId":"55","endLine":26,"endColumn":51},{"ruleId":"52","severity":1,"message":"60","line":69,"column":11,"nodeType":"54","messageId":"55","endLine":69,"endColumn":32},{"ruleId":"52","severity":1,"message":"61","line":2,"column":9,"nodeType":"54","messageId":"55","endLine":2,"endColumn":17},{"ruleId":"62","severity":1,"message":"63","line":54,"column":8,"nodeType":"64","endLine":54,"endColumn":20,"suggestions":"65"},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","'response' is assigned a value but never used.","'error' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'fetch' is assigned a value but never used.","'handleCreateNewSticky' is assigned a value but never used.","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetch', 'initialFetch', 'source', and 'state'. Either include them or remove the dependency array. You can also do a functional update 'updateState(s => ...)' if you only need 'state' in the 'updateState' call.","ArrayExpression",["68"],"no-global-assign","no-unsafe-negation",{"desc":"69","fix":"70"},"Update the dependencies array to be: [configHash, fetch, initialFetch, source, state]",{"range":"71","text":"72"},[1357,1369],"[configHash, fetch, initialFetch, source, state]"]