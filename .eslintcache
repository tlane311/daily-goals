[{"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\index.js":"1","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\dummy-data.js":"2","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\task\\task.js":"3","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\sticky\\Sticky.js":"4","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\app.js":"5","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\stickies-bar\\StickiesBar.js":"6","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\details-bar\\DetailsBar.js":"7","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\hooks\\useAPI.js":"8","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\login\\Login.js":"9","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\hooks\\useLocalStorage.js":"10","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\register\\Register.js":"11","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\pages\\MainPage.js":"12","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\pages\\LoginPage.js":"13","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\pages\\RegisterPage.js":"14","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\login\\login.js":"15","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\services\\listManagement.js":"16","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\services\\goalManagement.js":"17","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\hooks\\useKeyDown.js":"18","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\services\\userManagement.js":"19","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\task\\OrderButtons.js":"20"},{"size":133,"mtime":1615407378066,"results":"21","hashOfConfig":"22"},{"size":578,"mtime":1614370485921,"results":"23","hashOfConfig":"22"},{"size":2171,"mtime":1617558600602,"results":"24","hashOfConfig":"22"},{"size":9192,"mtime":1617647020525,"results":"25","hashOfConfig":"22"},{"size":10893,"mtime":1617557847145,"results":"26","hashOfConfig":"22"},{"size":2772,"mtime":1617556969771,"results":"27","hashOfConfig":"22"},{"size":4899,"mtime":1617558543756,"results":"28","hashOfConfig":"22"},{"size":2143,"mtime":1616615550478,"results":"29","hashOfConfig":"22"},{"size":3430,"mtime":1616607116628,"results":"30","hashOfConfig":"22"},{"size":375,"mtime":1616605752832,"results":"31","hashOfConfig":"22"},{"size":3105,"mtime":1616612438520,"results":"32","hashOfConfig":"22"},{"size":3770,"mtime":1617557940452,"results":"33","hashOfConfig":"22"},{"size":703,"mtime":1616614926257,"results":"34","hashOfConfig":"22"},{"size":702,"mtime":1616614975515,"results":"35","hashOfConfig":"22"},{"size":3430,"mtime":1616607116628,"results":"36","hashOfConfig":"22"},{"size":1380,"mtime":1616706760059,"results":"37","hashOfConfig":"22"},{"size":1889,"mtime":1617037433929,"results":"38","hashOfConfig":"22"},{"size":521,"mtime":1616781887140,"results":"39","hashOfConfig":"22"},{"size":1450,"mtime":1617035094777,"results":"40","hashOfConfig":"22"},{"size":319,"mtime":1617119333608,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1heis9t",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"47"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"44"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"44"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\index.js",[],["91","92"],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\dummy-data.js",[],["93","94"],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\task\\task.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\sticky\\Sticky.js",["95","96","97"],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\app.js",["98","99","100"],"import React, {useEffect, useState} from 'react';\r\n\r\nimport MainPage from './pages/MainPage.js';\r\nimport LoginPage from './pages/LoginPage.js';\r\nimport RegisterPage from './pages/RegisterPage.js';\r\n\r\nimport userManagement from '../services/userManagement.js';\r\n\r\n\r\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\r\n\r\nimport axios from 'axios';\r\n\r\nconst getUserRoute = '/api/me';\r\nconst getListsRoute = '/api/lists/me';\r\nconst getGoalsRoute = '/api/goals/me';\r\n\r\n\r\n// This component will perform all the of the db queries and route to all of the pages to our site.\r\n\r\n\r\nexport default function App(){\r\n    \r\n    \r\n    /*\r\n        When one logs in, the token will be stored in this component\r\n        Then, main page can use the token to get user data.\r\n        \r\n    */\r\n   // Note, use local storage for token\r\n\r\n    const [token, setToken] = useState(\"\");\r\n\r\n    const updateToken = (token) => {\r\n        setToken(token);\r\n    }\r\n\r\n    // We will pass setter functions here to children components so that they can request for the db to be queried.\r\n    const [initialFetchDone, setInitialFetchDone] = useState(false);\r\n    const [retrievedLists,setRetrievedLists] = useState(false);\r\n    const [retrievedGoals,setRetrievedGoals] = useState(false);\r\n\r\n\r\n    // This is our state for storing db query results\r\n    const [username, setUsername] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n\r\n    const [lists, setLists] = useState([]); // An array of objects each of which represents a list. Shape: {listId, listName, orderNumber}\r\n    const [selectedList, setSelectedList] = useState(0); // This should be the list id number\r\n    const [goals, setGoals] = useState({}); // An object with key-value pairs for each list. \r\n    // the shape: goals[list_id] = { fetchedOnce, data=[goal0, goal1, ...] }\r\n    // each goal has shape: {goalId, listId, goal, orderNumber, deadline, status, note, color}\r\n\r\n    // handle first fetch\r\n    // We will do a first fetch whenever the token changes.\r\n    useEffect( () => {\r\n        if (token) {\r\n            const retrieveData = async () => {\r\n                //await firstFetch({token, setUsername, setEmail, setSelectedList, setLists, setGoals});\r\n                \r\n                //setRetrievedLists(true);\r\n                //setInitialFetchDone(true);\r\n                let goalsData = {}\r\n                const [userData, listData] = await efficientFetch({token});\r\n\r\n                setUsername(userData.username);\r\n\r\n                setEmail(userData.email);\r\n\r\n                setLists(listData);\r\n                const selectedListExists = listData.find( list => list['list_id'] === userData['selected_list']);\r\n\r\n                // If the selectedList doesn't exist, we will need to manually update selectedList.\r\n                if (!selectedListExists){\r\n                    // If listData = [], ...\r\n                    if (!listData.length){\r\n                        userManagement.update(token, 'selected_list', 0);\r\n                    } else {\r\n                        // Otherwise ...\r\n                        userManagement.update(token, 'selected_list', listData[0]['selected_list']);\r\n                        setSelectedList(listData[0]['list_id']);\r\n                    }\r\n                    \r\n                } else {\r\n                    setSelectedList( selectedListExists['list_id'] ); \r\n                }\r\n\r\n                listData.map( list => {\r\n                    let listId = list['list_id'];\r\n                    return goalsData[listId] = { \r\n                        fetchedOnce: false,\r\n                        data: []\r\n                    };\r\n                });\r\n            \r\n                setGoals(goalsData);\r\n\r\n                setRetrievedLists(true);\r\n                setInitialFetchDone(true);\r\n\r\n            }\r\n\r\n            retrieveData();\r\n\r\n        }\r\n    }, [token])\r\n    \r\n    // handle calls for goals updates\r\n    useEffect( () => {\r\n        // We only want the code to execute in a few scenarios:\r\n        // If retrievedGoals has been set to false\r\n        // OR\r\n        // If selectedList changes and the goal data has not been fetched, then this will execute \r\n        const goalsNeedRetrieval = !retrievedGoals || !goals[selectedList] || !goals[selectedList].fetchedOnce;\r\n\r\n        if (initialFetchDone && token && goalsNeedRetrieval ){\r\n            grabGoalsData({token, selectedList, goals, setGoals});\r\n            setRetrievedGoals(true);\r\n        }\r\n\r\n    }, [initialFetchDone, selectedList, retrievedGoals]);\r\n\r\n    // handle calls for lists updates\r\n    useEffect( () => {\r\n\r\n        if (token && !retrievedLists){\r\n            grabListsData({token, setLists})\r\n            setRetrievedLists(true);\r\n        }\r\n    }, [retrievedLists]);\r\n\r\n    const updateApp = () => {\r\n        setRetrievedGoals(false);\r\n    }\r\n\r\n    const updateGoals = () => {\r\n        setRetrievedGoals(false);\r\n    }\r\n\r\n    const updateLists = () => {\r\n        setRetrievedLists(false);\r\n    }\r\n\r\n\r\n    return(\r\n        <>\r\n            <Router>\r\n                <Switch>\r\n                    <Route exact path=\"/\">\r\n                        <MainPage\r\n                            token={token}\r\n                            username={username}\r\n                            email={email} \r\n                            lists={lists}\r\n                            selectedList={selectedList}\r\n                            setSelectedList={setSelectedList}\r\n                            goals={goals}\r\n                            updateApp={updateApp}\r\n                            updateGoals={updateGoals}\r\n                            updateLists={updateLists}\r\n                        />\r\n                    </Route>\r\n                    <Route exact path=\"/login\">\r\n                        <LoginPage updateToken={updateToken}/>\r\n                    </Route>\r\n                    <Route exact path=\"/register\">\r\n                        <RegisterPage updateToken={updateToken}/>\r\n                    </Route>\r\n                </Switch>\r\n            </Router>\r\n\r\n\r\n\r\n        </>\r\n\r\n    )\r\n}\r\n\r\n\r\n/*\r\n    This function takes in a token and returns the user's data.\r\n    The expected shape is:\r\n        [\r\n            userData = {username, email},\r\n            listData = [{list_id, list_name, order_number}, {...}, ..., {...}],\r\n            goalsData = [[goalData1, goalData2, ....], [...], ..., [...]]\r\n        ]\r\n    Note, listData.length === goalsData.length and the order is the same.\r\n*/\r\n\r\n\r\n\r\nasync function grabListsData({token, setLists}){\r\n\r\n    let listData;\r\n\r\n    const getListsConfig = {\r\n        method: 'get',\r\n        url: getListsRoute,\r\n        headers: {\r\n            'x-access-token': token\r\n        }\r\n    }\r\n\r\n    await axios(getListsConfig)\r\n        .then( res => {\r\n            // We are just capturing the results and storing them in listData\r\n            return listData = res.data.results;\r\n        });\r\n    setLists(listData);\r\n}\r\n\r\nasync function grabGoalsData({token, selectedList, goals, setGoals}){\r\n\r\n    // if selectedList is zero, then we will not update goals at all\r\n    if (!selectedList){\r\n        return;\r\n    }\r\n\r\n    // Otherwise, ...\r\n    // Note, if selectedList has not be verified yet, then this will not throw an error. And, that's good!\r\n    let goalsData = {...goals}\r\n    const config= {\r\n        method: 'get',\r\n        url: getGoalsRoute,\r\n        params: { listId: selectedList},\r\n        headers: {\r\n            'x-access-token': token,\r\n        }\r\n    }\r\n\r\n    await axios(config)\r\n        .then( res => {\r\n            // If selectedList is not already a key in goals, then we need to add it\r\n            if (!goalsData[selectedList]){\r\n                goalsData[selectedList]={\r\n                    fetchedOnce: false, data: []\r\n                }\r\n            }\r\n\r\n            // Reading this key-value pair everytime and writing sometimes should be faster than just writing every time \r\n            if (!goalsData[selectedList].fetchedOnce) {goalsData[selectedList].fetchedOnce = true;}\r\n            goalsData[selectedList].data= res.data.results;\r\n        });\r\n    setGoals(goalsData);\r\n}\r\n\r\nasync function firstFetch({token, setUsername, setEmail, setSelectedList, setLists, setGoals}){\r\n\r\n    // on first fetch: grab user data, grab list data, handle selectedList, make goals obj,\r\n\r\n    let userData;\r\n    let listData;\r\n    let goalsData={};\r\n\r\n    const getUserConfig = {\r\n        method: 'get',\r\n        url: getUserRoute,\r\n        headers: {\r\n            'x-access-token': token,\r\n        }\r\n    }\r\n    const getListsConfig = {\r\n        method: 'get',\r\n        url: getListsRoute,\r\n        headers: {\r\n            'x-access-token': token\r\n        }\r\n    }\r\n\r\n    await axios(getUserConfig)\r\n        .then( res => {\r\n            // We are just capturing the results and storing them in userData\r\n            return userData = res.data.results;\r\n        });\r\n    setUsername(userData.username);   \r\n    setEmail(userData.email);\r\n\r\n    const selectedList= userData['selected_list'];\r\n\r\n    await axios(getListsConfig)\r\n        .then( res => {\r\n            // We are just capturing the results and storing them in listData\r\n            return listData = res.data.results;\r\n        });\r\n    setLists(listData);\r\n\r\n    // We need to manually check that the selectedList exists because we can't have a circular reference in our db.\r\n\r\n    const selectedListExists = listData.find( list => list['list_id'] === selectedList);\r\n\r\n    // If the selectedList doesn't exist, we will need to manually update selectedList.\r\n    if (!selectedListExists){\r\n        // If listData = [], ...\r\n        if (!listData.length){\r\n            await userManagement.update(token, 'selected_list', 0);\r\n        }\r\n        // Otherwise ...\r\n        await userManagement.update(token, 'selected_list', listData[0]['selected_list']);\r\n        setSelectedList(listData[0]['list_id']);\r\n    } else {\r\n        setSelectedList( selectedList ); \r\n    }\r\n\r\n    // For each list, we are going to add key-value pair to goalsData.\r\n    // When we actually fetch the goalsData, we will fill in this data.\r\n    listData.map( list => {\r\n        let listId = list['list_id'];\r\n        return goalsData[listId] = { \r\n            fetchedOnce: false,\r\n            data: []\r\n        };\r\n    });\r\n\r\n    setGoals(goalsData);\r\n}\r\n\r\n\r\nasync function GrabData(config){\r\n    return axios(config).then(res => res.data.results);\r\n}\r\n\r\nasync function efficientFetch({token}){\r\n\r\n    const getUserConfig = {\r\n        method: 'get',\r\n        url: getUserRoute,\r\n        headers: {\r\n            'x-access-token': token,\r\n        }\r\n    }\r\n    const getListsConfig = {\r\n        method: 'get',\r\n        url: getListsRoute,\r\n        headers: {\r\n            'x-access-token': token\r\n        }\r\n    }\r\n\r\n    return Promise.all([GrabData(getUserConfig), GrabData(getListsConfig)])\r\n}","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\stickies-bar\\StickiesBar.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\details-bar\\DetailsBar.js",["101","102","103"],"import \"../../component-styles/details-bar.css\";\r\nimport {useEffect, useState} from 'react';\r\nimport goalManagement from '../../services/goalManagement.js';\r\n\r\n\r\n\r\n// The shape of goals is { [list_id]: { fetchedOnce, data: [goal1,goal2,...] } }\r\n// goals can be an empty object ie. goals = {}\r\n// Note, we are not implementing deadlines for the moment because not all browsers support that input type.\r\n// We will implement that when we find a work around.\r\n\r\n\r\n\r\n\r\nexport default function DetailsBar({token, goals, selectedList, goalSelected, setGoalSelected, updateGoals}){\r\n    // have to set up routine for when to handleUpdate\r\n    const [visibility, setVisibility] = useState(false);\r\n\r\n    const blankGoal = { //blank goal in case no goal is selected\r\n        'goal_id': \"\",\r\n        'status': false,\r\n        'goal': \"\",\r\n        'deadline': '',\r\n        'note': '',\r\n        'color': ''\r\n    }\r\n\r\n    /* \r\n        goals = {} -> theGoal = blankGoal\r\n        goals = (not empty) -> theGoal = selectedList ? goals[selectedList].data.find( goal => goal===goalSelected ): blankGoal \r\n    */\r\n\r\n    const initialGoal = Object.keys(goals).length && selectedList && goals[selectedList] && Array.isArray(goals[selectedList].data)\r\n        ? goals[selectedList].data.find( goal => goal['goal_id'] === goalSelected)\r\n        : blankGoal;\r\n\r\n    const [theGoal, setTheGoal] = useState(initialGoal);\r\n\r\n    const [updateStatus, setUpdateStatus] = useState(theGoal.status ? 1 : 0)\r\n    const [updateGoal, setUpdateGoal] = useState(theGoal.goal)\r\n    const [updateNote, setUpdateNote] = useState(theGoal.note)\r\n    const [updateColor, setUpdateColor] = useState(theGoal.color)\r\n\r\n\r\n    useEffect( () => {\r\n        const nextGoal = Object.keys(goals).length && selectedList && goals[selectedList] && Array.isArray(goals[selectedList].data)\r\n            ? goals[selectedList].data.find( goal => goal['goal_id'] === goalSelected) || blankGoal\r\n            : blankGoal\r\n        setTheGoal(nextGoal);\r\n        setVisibility(Boolean(goalSelected))\r\n    }, [goalSelected])\r\n\r\n    useEffect( () => {\r\n        setUpdateStatus(theGoal.status ? 1 : 0)\r\n        setUpdateGoal(theGoal.goal)\r\n        setUpdateNote(theGoal.note)\r\n    }, [theGoal])\r\n\r\n    const handleSubmission = e => {\r\n        if (goalSelected) {\r\n            goalManagement.update(token, \r\n                theGoal['goal_id'], \r\n                updateGoal, \r\n                theGoal.orderNumber, \r\n                theGoal.deadline, \r\n                updateStatus, \r\n                updateNote, \r\n                updateColor)\r\n                .then( res => {updateGoals()});\r\n        }\r\n    }\r\n\r\n    const handleHide = e => {\r\n        setGoalSelected(false);\r\n    }\r\n\r\n\r\n    return (\r\n        <div\r\n            id=\"details-bar\" \r\n            className={\r\n                visibility\r\n                    ? \"component-shown\"\r\n                    : \"component-hidden\"\r\n            }\r\n        >\r\n            <div className=\"detail\" id=\"goal-box\"> \r\n                <GoalBox\r\n                    goal={updateGoal}\r\n                    status={updateStatus}\r\n                    updateGoal={setUpdateGoal}\r\n                    updateStatus={setUpdateStatus}\r\n                /> \r\n            </div>\r\n            {/*<div className=\"detail\"> <DeadlineBox deadline={theGoal.deadline.slice(1,theGoal.deadline.length-1)}/> </div>*/}\r\n            <div className=\"detail\" id=\"note-box\"> <NoteBox note={theGoal.note} updateNote={setUpdateNote}/> </div>\r\n            <div className=\"detail\"> <HighlightBox highlight={theGoal.color}/> </div>\r\n            <button onClick={handleSubmission}> Update </button>\r\n            <button onClick={handleHide}> Hide </button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nfunction GoalBox({goal, status, updateGoal, updateStatus}){\r\n    return (\r\n        <>  \r\n            <label>\r\n                <input type=\"checkbox\" checked={status} onChange={ e => {updateStatus(e.target.checked ? 1 : 0)}} />\r\n                <span\r\n                    className=\"status-box\">\r\n                </span>\r\n                <input type=\"text\" placeholder={goal} onChange={(e) => {updateGoal(e.target.value)}}/>\r\n            </label>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nfunction DeadlineBox({deadline}){\r\n    return (<>\r\n        <label>Deadline</label>\r\n        <input type=\"datetime-local\" placeholder={deadline}/>\r\n    </>)\r\n}\r\n\r\nfunction NoteBox({note, updateNote}){\r\n    return(\r\n        <>\r\n            <label>Note</label>\r\n        <textarea placeholder={note || \"Leave a note for your task\"} onChange={(e) => {updateNote(e.target.value)}}/>\r\n        </>\r\n    )\r\n}\r\n\r\nfunction HighlightBox({highlight}){\r\n    return(\r\n        <>  <label> Highlight Color</label>\r\n            <select>\r\n                <option> Red </option>  \r\n                <option> Green </option>  \r\n                <option> Orange </option>  \r\n            </select>\r\n        </>\r\n    )\r\n}","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\hooks\\useAPI.js",["104"],"import {useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\nimport hash from 'hash-object';\r\nconst CancelToken = axios.CancelToken;\r\n\r\n\r\n//this hook will allow us so streamline interacting with a rest api\r\n\r\n/*\r\nreturns\r\n    result, response, error, isLoading, fetch\r\n*/\r\n\r\nexport default function useAPI(config, initialFetch=true){\r\n    const [state, updateState] = useState({\r\n        response: undefined,\r\n        error: undefined,\r\n        isLoading: true\r\n    })\r\n\r\n    const configHash = hash(config);\r\n\r\n    const source = CancelToken.source();\r\n\r\n    function fetch(){\r\n        axios({\r\n            ...config, \r\n            cancelToken: source.token,\r\n            })\r\n        .then( res => {\r\n            updateState({ error: undefined, response: res, isLoading: false});\r\n        })\r\n        .catch( err => {\r\n            if (axios.isCancel(err)){\r\n                console.log('Request canceled by cleanup: ', err.message);\r\n            } else {\r\n                updateState({error: err, response: undefined, isLoading: false});\r\n            }\r\n        });\r\n    }\r\n\r\n    useEffect( () => {\r\n        updateState({...state, isLoading: true});\r\n\r\n        if (initialFetch){\r\n            fetch();\r\n        }\r\n\r\n        return () => {\r\n            source.cancel('useEffect cleanup.');\r\n        }\r\n\r\n    }, [configHash]);\r\n\r\n    const { response, error, isLoading} = state;\r\n\r\n    const data = response ? response.data : undefined;\r\n    return { data, response, error, isLoading, fetch };\r\n}\r\n\r\n/*\r\n\r\n    const config = {\r\n        \"method\":\"post\",\r\n        \"url\":\"api/login\",\r\n        \"headers\":{\r\n        \"Content-Type\":\"application/json\",\r\n        \"useQueryString\":true,\r\n        'rejectUnauthorized': false,\r\n        },\r\n        data: {\r\n            'username': 'tlane',\r\n            'password': 'some_password'\r\n        }\r\n    }\r\n    \r\n\r\n\r\n\r\n    const getData = async () => {\r\n        try{\r\n            return await axios(config)\r\n            .then( (res) => {\r\n                console.log('response',res);\r\n            })\r\n        } catch (e) {\r\n            console.log('error', e)\r\n        }\r\n    }\r\n\r\n    getData();\r\n\r\n*/","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\login\\Login.js",["105","106"],"import {useEffect, useState} from 'react';\r\nimport useLocalStorage from '../../hooks/useLocalStorage.js'\r\nimport FormData from 'form-data';\r\nimport axios from 'axios';\r\n\r\n\r\n// login route is the url for the post request\r\n// loginIdentifier is a string e.g. email or username\r\n// next is a callback that takes in the response object and tells axios what to do next\r\n// handleError is a callback that tkes in the error object and tells axios what to do next\r\nexport default function Login({loginRoute, loginIdentifier, next, handleError}){\r\n\r\n    // We use local storage for the \"Remember Me\" feature.\r\n    const [store, addItem, removeItem, clearStore] = useLocalStorage();\r\n\r\n\r\n    \r\n    // We need state for the login credentials so that we may pass that info into our custom form-submission handler.\r\n    const [loginName, setLoginName] = useState(\"\");\r\n    const [loginPassword, setLoginPassword] = useState(\"\");\r\n    const [rememberMe, setRememberMe] = useState(false);\r\n\r\n\r\n    // When this component first loads, it will check to see if localStorage has stored login info.\r\n    // If so, useEffect will automatically update the state.\r\n    useEffect( ()=> {\r\n        if (store[loginIdentifier]){\r\n            setRememberMe(true);\r\n            setLoginName(store[loginIdentifier]);\r\n        }\r\n    }, []);\r\n\r\n    const handleRememberMe = e => {\r\n        return setRememberMe(e.target.checked);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n\r\n        e.preventDefault(); // This stops the browser from handling the form on its own.\r\n\r\n        // Add loginName to localStorage if \"Remember Me\" box is checked.\r\n        if (rememberMe) {\r\n            addItem(loginIdentifier, loginName);\r\n        } else { // Otherwise, clear local storage.\r\n            clearStore();\r\n        }\r\n\r\n        const form = new FormData();\r\n        form.append(loginIdentifier, loginName);\r\n        form.append('password', loginPassword);\r\n\r\n        //reseting the password\r\n        setLoginPassword(\"\");\r\n        const config = {\r\n            method: 'post',\r\n            url: loginRoute,\r\n            data: form,\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data',\r\n            }\r\n        }\r\n\r\n        try {\r\n        axios(config)\r\n            .then( next )\r\n        } catch (e) {\r\n            handleError(e);\r\n        }\r\n    }\r\n\r\n    \r\n  \r\n  \r\n    return (\r\n        <form id=\"login\" onSubmit={handleSubmit}>\r\n            <label for={loginIdentifier}></label>\r\n            <input \r\n                type=\"text\"\r\n                value={loginName}\r\n                required \r\n                placeholder={loginIdentifier} \r\n                name={loginIdentifier} \r\n                onChange={ e => {return setLoginName(e.target.value)} }\r\n            />\r\n\r\n            <label for=\"password\"></label>\r\n            <input \r\n                type=\"password\" \r\n                value={loginPassword} \r\n                required \r\n                placeholder=\"password\" \r\n                name=\"password\" \r\n                onChange={ e => {return setLoginPassword(e.target.value)} }\r\n            />\r\n\r\n            <label for=\"remember-me\"> Remember Me </label>\r\n            <input \r\n                type=\"checkbox\" \r\n                name=\"remember-me\" \r\n                onChange={handleRememberMe}\r\n                checked={rememberMe}\r\n            />\r\n\r\n            <button type=\"submit\"> Login </button>\r\n        </form>\r\n    );\r\n}",["107","108"],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\hooks\\useLocalStorage.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\register\\Register.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\pages\\MainPage.js",["109"],"import React, {useState, useEffect} from 'react';\r\n\r\n\r\nimport Sticky from '../sticky/Sticky.js';\r\nimport StickiesBar from '../stickies-bar/StickiesBar.js';\r\nimport DetailsBar from '../details-bar/DetailsBar.js';\r\n\r\n\r\n\r\n\r\n/*\r\n    MainPage holds the current sticky, the details-bar and the stickies-bar.\r\n\r\n    MainPage will receieve lists, selectedList and goals from App.\r\n\r\n    MainPage serves to pass on the info to its children.\r\n\r\n    updateApp will force the main app fetch data again. We call this when we make changes to db.\r\n\r\n    I need to update selectedList to be a local storage thing\r\n*/\r\n\r\n\r\nconst blankList = { 'list_name': 'Create a New List', 'order_number': undefined}\r\n\r\nexport default function MainPage({token, lists, selectedList, setSelectedList, goals, updateApp, updateGoals, updateLists}){\r\n\r\n    \r\n    /*\r\n    Our data will be stored in a db. Ideally, we would like to query the database as few times as possible. If we query once, we will pull an array of columns. When we update these columns, react doesn't rerender; react fails to rerender because of the deeper shape of the array of columns. We introduce an artificial forceUpdate function to force rerenders.\r\n    */\r\n\r\n    const [, updateState] = React.useState();\r\n    const forceUpdate = React.useCallback(() => updateState({}), []);\r\n\r\n\r\n    const [allGoals, setAllGoals] = useState( goals ? {...goals} : {});\r\n\r\n    useEffect( () => {\r\n        setAllGoals(goals ? {...goals} : {});\r\n    }, [goals,lists])\r\n \r\n\r\n    // the current list might be undefined\r\n    const [currentList, setCurrentList] = useState(lists.find(list => list['list_id'] === selectedList) || blankList );\r\n\r\n    // whenever props update, update currentList\r\n    useEffect( () => {\r\n        setCurrentList( lists.find(list => list['list_id'] === selectedList )|| blankList);\r\n    }, [selectedList, lists]);\r\n\r\n    const [currentGoals, setCurrentGoals] = useState(allGoals[selectedList]);\r\n \r\n    // whenever props update, update currentGoals\r\n    useEffect( () => {\r\n        let updatedGoals = {}\r\n        // allGoals has shape: { listId: {goalData}, ... }\r\n        Object.keys(allGoals).map(\r\n            listId => {\r\n                updatedGoals[listId] = {};\r\n\r\n                return Object.keys(allGoals[listId]).map( (key) => {\r\n                    let newData = allGoals[listId][key];\r\n                    updatedGoals[listId][key] = Array.isArray(newData) ? [...newData] : newData;\r\n                    return newData;\r\n                });\r\n            }\r\n        )\r\n        setCurrentGoals(updatedGoals[selectedList]);\r\n    }, [selectedList, allGoals])\r\n\r\n    const [goalSelected, setGoalSelected] = useState(null);\r\n    \r\n    return(\r\n        <>\r\n            <StickiesBar\r\n                token={token}\r\n                lists={lists}\r\n                selectedList={selectedList}\r\n                setSelectedList={setSelectedList}\r\n                visibility={true}\r\n                updateApp={updateApp}\r\n                updateLists={updateLists}\r\n            />\r\n                   \r\n            <Sticky\r\n                token={token}\r\n                theList={currentList}\r\n                theGoals={currentGoals}\r\n                setGoalSelected={setGoalSelected}\r\n                updateApp={updateApp}\r\n                updateGoals={updateGoals}\r\n                updateLists={updateLists}\r\n            />\r\n \r\n            <DetailsBar \r\n                token={token}\r\n                goals={goals}\r\n                selectedList={selectedList}\r\n                goalSelected={goalSelected}\r\n                setGoalSelected={setGoalSelected}\r\n                visibility={true}\r\n                updateApp={updateApp}\r\n                updateGoals={updateGoals}\r\n            />   \r\n        </>\r\n    )\r\n}\r\n\r\n\r\n","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\pages\\LoginPage.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\pages\\RegisterPage.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\login\\login.js",["110","111"],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\services\\listManagement.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\services\\goalManagement.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\hooks\\useKeyDown.js",["112"],"import {useEffect, useState} from 'react';\r\n\r\n\r\nexport default function useKeyDown(targetKey){\r\n    const [keyDown, setKeyDown] = useState(false);\r\n \r\n    const callback = ({ key }) => {\r\n        if (key === targetKey) {\r\n            setKeyDown(true);\r\n            setTimeout( () => {setKeyDown(false)}, 500); \r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('keydown', callback);\r\n        return () => {window.removeEventListener('keydown', callback)}\r\n    },[]);\r\n    \r\n    return keyDown\r\n}","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\services\\userManagement.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\task\\OrderButtons.js",[],{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","replacedBy":"116"},{"ruleId":"113","replacedBy":"117"},{"ruleId":"115","replacedBy":"118"},{"ruleId":"119","severity":1,"message":"120","line":23,"column":12,"nodeType":"121","messageId":"122","endLine":23,"endColumn":16},{"ruleId":"123","severity":1,"message":"124","line":82,"column":8,"nodeType":"125","endLine":82,"endColumn":18,"suggestions":"126"},{"ruleId":"123","severity":1,"message":"127","line":116,"column":8,"nodeType":"125","endLine":116,"endColumn":24,"suggestions":"128"},{"ruleId":"123","severity":1,"message":"129","line":121,"column":8,"nodeType":"125","endLine":121,"endColumn":56,"suggestions":"130"},{"ruleId":"123","severity":1,"message":"131","line":130,"column":8,"nodeType":"125","endLine":130,"endColumn":24,"suggestions":"132"},{"ruleId":"119","severity":1,"message":"133","line":248,"column":16,"nodeType":"121","messageId":"122","endLine":248,"endColumn":26},{"ruleId":"119","severity":1,"message":"134","line":42,"column":25,"nodeType":"121","messageId":"122","endLine":42,"endColumn":39},{"ruleId":"123","severity":1,"message":"135","line":51,"column":8,"nodeType":"125","endLine":51,"endColumn":22,"suggestions":"136"},{"ruleId":"119","severity":1,"message":"137","line":120,"column":10,"nodeType":"121","messageId":"122","endLine":120,"endColumn":21},{"ruleId":"123","severity":1,"message":"138","line":53,"column":8,"nodeType":"125","endLine":53,"endColumn":20,"suggestions":"139"},{"ruleId":"119","severity":1,"message":"140","line":14,"column":28,"nodeType":"121","messageId":"122","endLine":14,"endColumn":38},{"ruleId":"123","severity":1,"message":"141","line":31,"column":8,"nodeType":"125","endLine":31,"endColumn":10,"suggestions":"142"},{"ruleId":"113","replacedBy":"143"},{"ruleId":"115","replacedBy":"144"},{"ruleId":"119","severity":1,"message":"145","line":34,"column":11,"nodeType":"121","messageId":"122","endLine":34,"endColumn":22},{"ruleId":"119","severity":1,"message":"140","line":14,"column":28,"nodeType":"121","messageId":"122","endLine":14,"endColumn":38},{"ruleId":"123","severity":1,"message":"141","line":31,"column":8,"nodeType":"125","endLine":31,"endColumn":10,"suggestions":"146"},{"ruleId":"123","severity":1,"message":"147","line":17,"column":7,"nodeType":"125","endLine":17,"endColumn":9,"suggestions":"148"},"no-native-reassign",["149"],"no-negated-in-lhs",["150"],["149"],["150"],"no-unused-vars","'list' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'token' and 'updateGoals'. Either include them or remove the dependency array. If 'updateGoals' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["151"],"React Hook useEffect has missing dependencies: 'handleNewGoalCreation' and 'newTask'. Either include them or remove the dependency array.",["152"],"React Hook useEffect has missing dependencies: 'goals' and 'token'. Either include them or remove the dependency array.",["153"],"React Hook useEffect has a missing dependency: 'token'. Either include it or remove the dependency array.",["154"],"'firstFetch' is defined but never used.","'setUpdateColor' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'blankGoal', 'goals', and 'selectedList'. Either include them or remove the dependency array.",["155"],"'DeadlineBox' is defined but never used.","React Hook useEffect has missing dependencies: 'fetch', 'initialFetch', 'source', and 'state'. Either include them or remove the dependency array. You can also do a functional update 'updateState(s => ...)' if you only need 'state' in the 'updateState' call.",["156"],"'removeItem' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'loginIdentifier' and 'store'. Either include them or remove the dependency array. If 'setLoginName' needs the current value of 'loginIdentifier', you can also switch to useReducer instead of useState and read 'loginIdentifier' in the reducer.",["157"],["149"],["150"],"'forceUpdate' is assigned a value but never used.",["158"],"React Hook useEffect has a missing dependency: 'callback'. Either include it or remove the dependency array.",["159"],"no-global-assign","no-unsafe-negation",{"desc":"160","fix":"161"},{"desc":"162","fix":"163"},{"desc":"164","fix":"165"},{"desc":"166","fix":"167"},{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},{"desc":"172","fix":"173"},{"desc":"172","fix":"174"},{"desc":"175","fix":"176"},"Update the dependencies array to be: [theGoals, token, updateGoals]",{"range":"177","text":"178"},"Update the dependencies array to be: [enterKeyIsDown, handleNewGoalCreation, newTask]",{"range":"179","text":"180"},"Update the dependencies array to be: [initialFetchDone, selectedList, retrievedGoals, goals, token]",{"range":"181","text":"182"},"Update the dependencies array to be: [retrievedLists, token]",{"range":"183","text":"184"},"Update the dependencies array to be: [blankGoal, goalSelected, goals, selectedList]",{"range":"185","text":"186"},"Update the dependencies array to be: [configHash, fetch, initialFetch, source, state]",{"range":"187","text":"188"},"Update the dependencies array to be: [loginIdentifier, store]",{"range":"189","text":"190"},{"range":"191","text":"190"},"Update the dependencies array to be: [callback]",{"range":"192","text":"193"},[3455,3465],"[theGoals, token, updateGoals]",[4697,4713],"[enterKeyIsDown, handleNewGoalCreation, newTask]",[4502,4550],"[initialFetchDone, selectedList, retrievedGoals, goals, token]",[4763,4779],"[retrievedLists, token]",[2044,2058],"[blankGoal, goalSelected, goals, selectedList]",[1322,1334],"[configHash, fetch, initialFetch, source, state]",[1306,1308],"[loginIdentifier, store]",[1306,1308],[488,490],"[callback]"]