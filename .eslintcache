[{"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\index.js":"1","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\task\\task.js":"2","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\sticky\\Sticky.js":"3","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\app.js":"4","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\stickies-bar\\StickiesBar.js":"5","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\details-bar\\DetailsBar.js":"6","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\hooks\\useAPI.js":"7","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\login\\Login.js":"8","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\hooks\\useLocalStorage.js":"9","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\register\\Register.js":"10","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\pages\\MainPage.js":"11","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\pages\\LoginPage.js":"12","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\pages\\RegisterPage.js":"13","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\login\\login.js":"14","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\services\\listManagement.js":"15","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\services\\goalManagement.js":"16","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\hooks\\useKeyDown.js":"17","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\services\\userManagement.js":"18","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\task\\OrderButtons.js":"19","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\details-bar\\GoalDetails.js":"20","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\details-bar\\ListDetails.js":"21","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\default-data.js":"22","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\pages\\NewUserPage.js":"23","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\services\\createTrialAccount.js":"24","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\task\\HighlightedText.js":"25","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\pages\\AccountMgmtPage.js":"26","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\hooks\\useWindowDimensions.js":"27"},{"size":133,"mtime":1615407378066,"results":"28","hashOfConfig":"29"},{"size":3268,"mtime":1618339601079,"results":"30","hashOfConfig":"29"},{"size":10264,"mtime":1618259716586,"results":"31","hashOfConfig":"29"},{"size":13095,"mtime":1618432237911,"results":"32","hashOfConfig":"29"},{"size":8544,"mtime":1618432311637,"results":"33","hashOfConfig":"29"},{"size":2961,"mtime":1618091420719,"results":"34","hashOfConfig":"29"},{"size":2143,"mtime":1616615550478,"results":"35","hashOfConfig":"29"},{"size":3430,"mtime":1616607116628,"results":"36","hashOfConfig":"29"},{"size":375,"mtime":1616605752832,"results":"37","hashOfConfig":"29"},{"size":3283,"mtime":1618261988065,"results":"38","hashOfConfig":"29"},{"size":6766,"mtime":1618432287212,"results":"39","hashOfConfig":"29"},{"size":1273,"mtime":1618427717496,"results":"40","hashOfConfig":"29"},{"size":1032,"mtime":1618263802966,"results":"41","hashOfConfig":"29"},{"size":3510,"mtime":1618265249239,"results":"42","hashOfConfig":"29"},{"size":1380,"mtime":1616706760059,"results":"43","hashOfConfig":"29"},{"size":1889,"mtime":1617037433929,"results":"44","hashOfConfig":"29"},{"size":521,"mtime":1616781887140,"results":"45","hashOfConfig":"29"},{"size":1699,"mtime":1617995461007,"results":"46","hashOfConfig":"29"},{"size":373,"mtime":1618082573690,"results":"47","hashOfConfig":"29"},{"size":7207,"mtime":1618259622986,"results":"48","hashOfConfig":"29"},{"size":2940,"mtime":1618258057915,"results":"49","hashOfConfig":"29"},{"size":666,"mtime":1617820272095,"results":"50","hashOfConfig":"29"},{"size":2713,"mtime":1618430603839,"results":"51","hashOfConfig":"29"},{"size":1865,"mtime":1617995191909,"results":"52","hashOfConfig":"29"},{"size":1957,"mtime":1618422251323,"results":"53","hashOfConfig":"29"},{"size":4059,"mtime":1618427315079,"results":"54","hashOfConfig":"29"},{"size":604,"mtime":1618425539225,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"1heis9t",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"58"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"58"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"58"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"58"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"58"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"58"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\index.js",[],["122","123"],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\task\\task.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\sticky\\Sticky.js",["124","125","126","127","128"],"import {useState, useEffect} from 'react';\r\nimport '../../component-styles/sticky.css';\r\n\r\nimport Task from '../task/task.js';\r\n\r\nimport React from 'react';\r\n\r\nimport goalManagement from '../../services/goalManagement.js';\r\nimport listManagement from '../../services/listManagement.js';\r\nimport userManagement from '../../services/userManagement.js';\r\n\r\nimport useKeyDown from '../../hooks/useKeyDown.js';\r\n\r\n\r\nexport default function Sticky({ token, theList, theGoals, goalSelected, setGoalSelected, getListDetails, setGetListDetails, handleListDeletion, updateGoals, updateLists, detailsBarIsVisible, setDetailsBarIsVisible }){\r\n    const enterKeyIsDown = useKeyDown('Enter'); // We would like for the user to be able create a new goal using \"Enter\" key\r\n\r\n    // Shape of theGoals: { fetchedOnce, data }\r\n\r\n    const [goals, setGoals] = useState(theGoals ? theGoals.data : []);\r\n\r\n    useEffect( () => {\r\n        const newGoals = theGoals ? {...theGoals} : {fetchedOnce: false, data: []}\r\n        setGoals(newGoals.data)\r\n    }, [theGoals]);\r\n\r\n\r\n    // if the goals aren't sorted, handle sorting\r\n    useEffect( () => {\r\n        // Note, we define an async function and then call it to make sure our db updates happen in a given order\r\n        // If we modify this in the future, take this note into consideration.\r\n\r\n        const asyncEffect = async () => {\r\n\r\n            // If order numbers are inconsistent, we will update db and the rerender app.\r\n            // If order numbers are consistent, we will sort theGoals and store as state.\r\n\r\n            // This const is just so that we always have a well-defined theGoals-like obj. Hence: 'reliable'.\r\n            const reliableGoals = theGoals ? {...theGoals} : {fetchedOnce: false, data: []}\r\n\r\n            // containsRepeats returns a boolean representing if the arr contains repeats\r\n            const repeatsExist = containsRepeats(reliableGoals.data.map(goal => goal['order_number']));\r\n            const gapsExist = reliableGoals.data.filter( goal => goal['order_number'] >= reliableGoals.data.length).length;\r\n\r\n            // If no gaps exist, then every element has order number less than the length.\r\n            // If there are no repeats and no gaps, then theGoals.data.map(goal => goal['order_number']) = [0,1,2,3, ..., theGoals.length - 1];\r\n            const sortingNeeded = gapsExist || repeatsExist;\r\n            \r\n            if (sortingNeeded) {\r\n                // We order the given reliableGoals by the order-numbers presented.\r\n                // Then, we will change the order-numbers so that no repeats or gaps exist\r\n                // If we do not first order reliableGoals, then really chaotic reorderings can happen if the user spams the order-buttons.\r\n                const orderedGoals = [...reliableGoals.data];\r\n                orderedGoals.sort( (first, second) => first['order_number'] - second['order_number']);\r\n                // Note, for a compare fn, positive difference means reverse order, nonpositive difference means preserve order\r\n                for (let i=0; i < orderedGoals.length; i++){                \r\n                    await goalManagement.update( token,\r\n                        orderedGoals[i]['goal_id'], //goalId\r\n                        orderedGoals[i]['goal'], //goal\r\n                        i, //orderNumber.\r\n                        orderedGoals[i]['deadline'], //deadline\r\n                        orderedGoals[i]['status'], //status\r\n                        orderedGoals[i]['note'], //note\r\n                        orderedGoals[i]['color'], //color\r\n                    )\r\n                }\r\n\r\n                return updateGoals();\r\n            }\r\n\r\n            // If sorting not needed ...\r\n            const sorted = [...reliableGoals.data].sort( (a,b) => a['order_number'] - b['order_number']);\r\n            // Note, for a compare fn, positive difference means reverse order, nonpositive difference means preserve order\r\n            setGoals(sorted);\r\n        }\r\n        if (token){  \r\n            asyncEffect();\r\n        }\r\n\r\n    }, [theGoals])\r\n\r\n    const [newTask, setNewTask] = useState(\"\");\r\n\r\n    const handleNewGoalCreation = async e => {\r\n        // if user is logged in, update the db and the tell App to fetch the updated data\r\n        if (token){\r\n            await goalManagement.create(token, theList['list_id'], newTask, theGoals.data.length);\r\n            setNewTask(\"\");\r\n            updateGoals();\r\n        }\r\n    }\r\n\r\n    useEffect( () => { // Note, we had some trouble using onKeyDown, so we make use of useEffect to handle the keydown \"event\".\r\n        if (enterKeyIsDown && newTask)\r\n        {\r\n            handleNewGoalCreation();\r\n        }\r\n    }, [enterKeyIsDown])\r\n\r\n    const handleIncreasePriority = (id) => {\r\n\r\n        // We will return an event handler that depends upon the id input\r\n\r\n        return e => {\r\n            // Here, we will update the priority in the db and then update the app\r\n\r\n            const targetIndex = goals.findIndex( goal => goal['goal_id'] === id);\r\n\r\n            // If target is the first element of the array OR for some reason the id is not found\r\n            if (targetIndex<=0) return;\r\n\r\n            // Otherwise,\r\n            \r\n            const targetGoal = goals[targetIndex];\r\n            const previousGoal = goals[targetIndex - 1]; // Note, if the function reaches here, targetIndex - 1 >= 0\r\n\r\n            goalManagement.update(token,\r\n                targetGoal['goal_id'],\r\n                targetGoal['goal'],\r\n                targetIndex - 1,\r\n                targetGoal['deadline'],\r\n                targetGoal['status'],\r\n                targetGoal['note'],\r\n                targetGoal['color'])\r\n                .then(res => {\r\n                    return goalManagement.update(token,\r\n                        previousGoal['goal_id'],\r\n                        previousGoal['goal'],\r\n                        targetIndex,\r\n                        previousGoal['deadline'],\r\n                        previousGoal['status'],\r\n                        previousGoal['note'],\r\n                        previousGoal['color']\r\n                    );\r\n                })\r\n                .then( res => {\r\n                    return updateGoals();\r\n                });\r\n        }\r\n\r\n    }\r\n\r\n    const handleDecreasePriority = (id) => {\r\n        // We will return an event handler that depends upon the id input\r\n\r\n        return e => {\r\n            // Here, we will update the priority in the db and then update the app\r\n\r\n            const targetIndex = goals.findIndex( goal => goal['goal_id'] === id); \r\n\r\n            // If target is the last element of the array OR for some reason the id is not found\r\n            \r\n            if (targetIndex<0 || targetIndex===goals.length - 1) return;\r\n\r\n            // Otherwise,\r\n            \r\n            const targetGoal = goals[targetIndex];\r\n            const nextGoal = goals[targetIndex + 1]; // Note, if the function reaches here, targetIndex - 1 >= 0\r\n\r\n            goalManagement.update(token,\r\n                targetGoal['goal_id'],\r\n                targetGoal['goal'],\r\n                targetIndex + 1,\r\n                targetGoal['deadline'],\r\n                targetGoal['status'],\r\n                targetGoal['note'],\r\n                targetGoal['color'])\r\n                .then( res => {\r\n                    return goalManagement.update(token,\r\n                        nextGoal['goal_id'],\r\n                        nextGoal['goal'],\r\n                        targetIndex,\r\n                        nextGoal['deadline'],\r\n                        nextGoal['status'],\r\n                        nextGoal['note'],\r\n                        nextGoal['color']\r\n                    );\r\n                })\r\n                .then( res => {\r\n                    updateGoals();\r\n                });\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    const handleListDetails = e => {\r\n        if (!getListDetails){ // If user wasn't already looking at the list details, set visibility to true\r\n            setDetailsBarIsVisible(true)\r\n        } else { // If the user is looking at list details, toggle visibility\r\n            setDetailsBarIsVisible(!detailsBarIsVisible)\r\n        }\r\n        setGetListDetails(true);\r\n    }\r\n\r\n    return (\r\n        <div className=\"sticky\" id=\"sticky\"> {/* why do I have redundant class and id*/}\r\n            <h3\r\n                onClick={ handleListDetails}\r\n            > \r\n                {theList['list_name']}\r\n            </h3>\r\n            <ul>\r\n                {goals.map(\r\n                    goal => \r\n                        <Task \r\n                            token={token}\r\n                            goal={goal}\r\n                            goalSelected={goalSelected}\r\n                            setGoalSelected={setGoalSelected}\r\n                            handleIncreasePriority={handleIncreasePriority}\r\n                            handleDecreasePriority={handleDecreasePriority}\r\n                            updateGoals={updateGoals}\r\n                            getListDetails={getListDetails}\r\n                            setGetListDetails={setGetListDetails}\r\n                            detailsBarIsVisible={detailsBarIsVisible}\r\n                            setDetailsBarIsVisible={setDetailsBarIsVisible}\r\n                        />)}\r\n            </ul>\r\n            <span className=\"new-task\">\r\n                <button onClick={handleNewGoalCreation}>\r\n                    +\r\n                </button> \r\n\r\n                <input type=\"text\" value={newTask} onChange={ e => setNewTask( e.target.value)}/>\r\n            </span>\r\n\r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nfunction RenameListInput({setNewListName, updateList}){\r\n    return (\r\n        <>\r\n            <input type=\"text\" placeholder=\"New List Name\" onChange={ e => { setNewListName(e.target.value); }}/>\r\n            <button onClick={updateList}> Update </button>\r\n        </>\r\n    );\r\n}\r\n\r\n// Helper function for ordering goals/lists\r\nfunction containsRepeats(arr){\r\n    if (!Array.isArray(arr)) return undefined;\r\n    \r\n    let newArr = [];\r\n\r\n    for (let index =0; index < arr.length; index++){\r\n        if ( newArr.includes(arr[index]) ) return true;\r\n        newArr.push(arr[index]);\r\n    }\r\n\r\n    return false;\r\n}","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\app.js",["129","130","131","132","133","134"],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\stickies-bar\\StickiesBar.js",["135"],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\details-bar\\DetailsBar.js",["136","137"],"import \"../../component-styles/details-bar.css\";\r\nimport {useEffect, useState} from 'react';\r\n\r\nimport GoalDetails from './GoalDetails.js';\r\nimport ListDetails from './ListDetails.js';\r\n\r\n\r\n\r\n// This component is a child of MainPage that is shown whenever the user wants to update either list or goal data.\r\n\r\n// NOTES ON PROPS PASSED TO THIS COMPONENT\r\n\r\n// token is set in App and used as credentials to make db queries\r\n// goals is defined in App and has shape { [list_id]: { fetchedOnce, data: [goal1,goal2,...] } }.\r\n// goals can be an empty object ie. goals = {}\r\n// goal data has shape: { list_id, goal_id, goal, note, status color }\r\n// lists is set in App and has shape [ {list_id, list_name, order_number}, {list_id, list_name, order_number}, ...]\r\n// list data has shape { list_id, list_name, order_number }\r\n// selectedList is a list_id (i.e. positive number) which is defined in Main Page\r\n// goalSelected is a goal_id which is defined in Main Page and updated by Sticky\r\n// setGoalSelected is the setter for goalSelected\r\n// getListDetails is a boolean that represents whether use wants to update a list or not.\r\n// deleteList is defined in MainPage and handles deleting a list. Because we are using a relational db, we must delete all goals associated to a list before we delete the list itself.\r\n// updateLists is a synchronous function defined in App. This function forces App to query the db for all list info. Note, this fn is not async.\r\n// updateGoals is a synchronous function defined in App. This function forces App to query the db for all goals info. Note, this fn is not async.\r\n\r\n\r\n// Note, we are not implementing deadlines for the moment because not all browsers support that input type. We will implement this in the future.\r\n\r\n\r\nexport default function DetailsBar({token, goals, lists, selectedList, goalSelected, setGoalSelected, getListDetails, handleDeleteList, updateGoals, updateLists, visibility, setVisibility, setData}){\r\n    \r\n    return (\r\n        <div\r\n            id=\"details-bar\" \r\n            className={\r\n                visibility\r\n                    ? \"component-shown\"\r\n                    : \"component-hidden\"\r\n            }\r\n        >\r\n            {getListDetails \r\n                ? <ListDetails\r\n                    token={token}\r\n                    lists={lists}\r\n                    selectedList={selectedList}\r\n                    updateLists={updateLists}\r\n                    setVisibility={setVisibility}\r\n                    handleDeleteList={handleDeleteList}\r\n                />\r\n                : <GoalDetails \r\n                    token={token}\r\n                    goals={goals}\r\n                    selectedList={selectedList}\r\n                    goalSelected={goalSelected}\r\n                    setGoalSelected={setGoalSelected}\r\n                    updateGoals={updateGoals}\r\n                    setVisibility={setVisibility}\r\n                />\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\hooks\\useAPI.js",["138"],"import {useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\nimport hash from 'hash-object';\r\nconst CancelToken = axios.CancelToken;\r\n\r\n\r\n//this hook will allow us so streamline interacting with a rest api\r\n\r\n/*\r\nreturns\r\n    result, response, error, isLoading, fetch\r\n*/\r\n\r\nexport default function useAPI(config, initialFetch=true){\r\n    const [state, updateState] = useState({\r\n        response: undefined,\r\n        error: undefined,\r\n        isLoading: true\r\n    })\r\n\r\n    const configHash = hash(config);\r\n\r\n    const source = CancelToken.source();\r\n\r\n    function fetch(){\r\n        axios({\r\n            ...config, \r\n            cancelToken: source.token,\r\n            })\r\n        .then( res => {\r\n            updateState({ error: undefined, response: res, isLoading: false});\r\n        })\r\n        .catch( err => {\r\n            if (axios.isCancel(err)){\r\n                console.log('Request canceled by cleanup: ', err.message);\r\n            } else {\r\n                updateState({error: err, response: undefined, isLoading: false});\r\n            }\r\n        });\r\n    }\r\n\r\n    useEffect( () => {\r\n        updateState({...state, isLoading: true});\r\n\r\n        if (initialFetch){\r\n            fetch();\r\n        }\r\n\r\n        return () => {\r\n            source.cancel('useEffect cleanup.');\r\n        }\r\n\r\n    }, [configHash]);\r\n\r\n    const { response, error, isLoading} = state;\r\n\r\n    const data = response ? response.data : undefined;\r\n    return { data, response, error, isLoading, fetch };\r\n}\r\n\r\n/*\r\n\r\n    const config = {\r\n        \"method\":\"post\",\r\n        \"url\":\"api/login\",\r\n        \"headers\":{\r\n        \"Content-Type\":\"application/json\",\r\n        \"useQueryString\":true,\r\n        'rejectUnauthorized': false,\r\n        },\r\n        data: {\r\n            'username': 'tlane',\r\n            'password': 'some_password'\r\n        }\r\n    }\r\n    \r\n\r\n\r\n\r\n    const getData = async () => {\r\n        try{\r\n            return await axios(config)\r\n            .then( (res) => {\r\n                console.log('response',res);\r\n            })\r\n        } catch (e) {\r\n            console.log('error', e)\r\n        }\r\n    }\r\n\r\n    getData();\r\n\r\n*/",["139","140"],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\login\\Login.js",["141","142"],"import {useEffect, useState} from 'react';\r\nimport useLocalStorage from '../../hooks/useLocalStorage.js'\r\nimport FormData from 'form-data';\r\nimport axios from 'axios';\r\n\r\n\r\n// login route is the url for the post request\r\n// loginIdentifier is a string e.g. email or username\r\n// next is a callback that takes in the response object and tells axios what to do next\r\n// handleError is a callback that tkes in the error object and tells axios what to do next\r\nexport default function Login({loginRoute, loginIdentifier, next, handleError}){\r\n\r\n    // We use local storage for the \"Remember Me\" feature.\r\n    const [store, addItem, removeItem, clearStore] = useLocalStorage();\r\n\r\n\r\n    \r\n    // We need state for the login credentials so that we may pass that info into our custom form-submission handler.\r\n    const [loginName, setLoginName] = useState(\"\");\r\n    const [loginPassword, setLoginPassword] = useState(\"\");\r\n    const [rememberMe, setRememberMe] = useState(false);\r\n\r\n\r\n    // When this component first loads, it will check to see if localStorage has stored login info.\r\n    // If so, useEffect will automatically update the state.\r\n    useEffect( ()=> {\r\n        if (store[loginIdentifier]){\r\n            setRememberMe(true);\r\n            setLoginName(store[loginIdentifier]);\r\n        }\r\n    }, []);\r\n\r\n    const handleRememberMe = e => {\r\n        return setRememberMe(e.target.checked);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n\r\n        e.preventDefault(); // This stops the browser from handling the form on its own.\r\n\r\n        // Add loginName to localStorage if \"Remember Me\" box is checked.\r\n        if (rememberMe) {\r\n            addItem(loginIdentifier, loginName);\r\n        } else { // Otherwise, clear local storage.\r\n            clearStore();\r\n        }\r\n\r\n        const form = new FormData();\r\n        form.append(loginIdentifier, loginName);\r\n        form.append('password', loginPassword);\r\n\r\n        //reseting the password\r\n        setLoginPassword(\"\");\r\n        const config = {\r\n            method: 'post',\r\n            url: loginRoute,\r\n            data: form,\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data',\r\n            }\r\n        }\r\n\r\n        try {\r\n        axios(config)\r\n            .then( next )\r\n        } catch (e) {\r\n            handleError(e);\r\n        }\r\n    }\r\n\r\n    \r\n  \r\n  \r\n    return (\r\n        <form id=\"login\" onSubmit={handleSubmit}>\r\n            <label for={loginIdentifier}></label>\r\n            <input \r\n                type=\"text\"\r\n                value={loginName}\r\n                required \r\n                placeholder={loginIdentifier} \r\n                name={loginIdentifier} \r\n                onChange={ e => {return setLoginName(e.target.value)} }\r\n            />\r\n\r\n            <label for=\"password\"></label>\r\n            <input \r\n                type=\"password\" \r\n                value={loginPassword} \r\n                required \r\n                placeholder=\"password\" \r\n                name=\"password\" \r\n                onChange={ e => {return setLoginPassword(e.target.value)} }\r\n            />\r\n\r\n            <label for=\"remember-me\"> Remember Me </label>\r\n            <input \r\n                type=\"checkbox\" \r\n                name=\"remember-me\" \r\n                onChange={handleRememberMe}\r\n                checked={rememberMe}\r\n            />\r\n\r\n            <button type=\"submit\"> Login </button>\r\n        </form>\r\n    );\r\n}",["143","144"],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\hooks\\useLocalStorage.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\register\\Register.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\pages\\MainPage.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\pages\\LoginPage.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\pages\\RegisterPage.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\login\\login.js",["145","146"],"import {useEffect, useState} from 'react';\r\nimport useLocalStorage from '../../hooks/useLocalStorage.js'\r\nimport FormData from 'form-data';\r\nimport axios from 'axios';\r\n\r\n\r\n// login route is the url for the post request\r\n// loginIdentifier is a string e.g. email or username\r\n// next is a callback that takes in the response object and tells axios what to do next\r\n// handleError is a callback that tkes in the error object and tells axios what to do next\r\nexport default function Login({loginRoute, loginIdentifier, next, handleError}){\r\n\r\n    // We use local storage for the \"Remember Me\" feature.\r\n    const [store, addItem, removeItem, clearStore] = useLocalStorage();\r\n\r\n\r\n    \r\n    // We need state for the login credentials so that we may pass that info into our custom form-submission handler.\r\n    const [loginName, setLoginName] = useState(\"\");\r\n    const [loginPassword, setLoginPassword] = useState(\"\");\r\n    const [rememberMe, setRememberMe] = useState(false);\r\n\r\n\r\n    // When this component first loads, it will check to see if localStorage has stored login info.\r\n    // If so, useEffect will automatically update the state.\r\n    useEffect( ()=> {\r\n        if (store[loginIdentifier]){\r\n            setRememberMe(true);\r\n            setLoginName(store[loginIdentifier]);\r\n        }\r\n    }, []);\r\n\r\n    const handleRememberMe = e => {\r\n        return setRememberMe(e.target.checked);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n\r\n        e.preventDefault(); // This stops the browser from handling the form on its own.\r\n\r\n        // Add loginName to localStorage if \"Remember Me\" box is checked.\r\n        if (rememberMe) {\r\n            addItem(loginIdentifier, loginName);\r\n        } else { // Otherwise, clear local storage.\r\n            clearStore();\r\n        }\r\n\r\n        const form = new FormData();\r\n        form.append(loginIdentifier, loginName);\r\n        form.append('password', loginPassword);\r\n\r\n        //reseting the password\r\n        setLoginPassword(\"\");\r\n        const config = {\r\n            method: 'post',\r\n            url: loginRoute,\r\n            data: form,\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data',\r\n            }\r\n        }\r\n\r\n        try {\r\n        axios(config)\r\n            .then( next )\r\n        } catch (e) {\r\n            handleError(e);\r\n        }\r\n    }\r\n\r\n    \r\n  \r\n  \r\n    return (\r\n        <form id=\"login\" onSubmit={handleSubmit}>\r\n            <label for={loginIdentifier}></label>\r\n            <input \r\n                type=\"text\"\r\n                value={loginName}\r\n                required \r\n                placeholder={loginIdentifier} \r\n                name={loginIdentifier} \r\n                onChange={ e => {return setLoginName(e.target.value)} }\r\n            />\r\n\r\n            <label for=\"password\"></label>\r\n            <input \r\n                type=\"password\" \r\n                value={loginPassword} \r\n                required \r\n                placeholder=\"password\" \r\n                name=\"password\" \r\n                onChange={ e => {return setLoginPassword(e.target.value)} }\r\n            />\r\n\r\n\r\n\r\n            <button type=\"submit\"> Login </button>\r\n            <label className='remember-me' for=\"remember-me\">\r\n                Remember Me\r\n                <input \r\n                    type=\"checkbox\" \r\n                    name=\"remember-me\" \r\n                    onChange={handleRememberMe}\r\n                    checked={rememberMe}\r\n                />\r\n            </label>\r\n        </form>\r\n    );\r\n}","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\services\\listManagement.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\services\\goalManagement.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\hooks\\useKeyDown.js",["147"],"import {useEffect, useState} from 'react';\r\n\r\n\r\nexport default function useKeyDown(targetKey){\r\n    const [keyDown, setKeyDown] = useState(false);\r\n \r\n    const callback = ({ key }) => {\r\n        if (key === targetKey) {\r\n            setKeyDown(true);\r\n            setTimeout( () => {setKeyDown(false)}, 500); \r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('keydown', callback);\r\n        return () => {window.removeEventListener('keydown', callback)}\r\n    },[]);\r\n    \r\n    return keyDown\r\n}","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\services\\userManagement.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\task\\OrderButtons.js",[],["148","149"],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\details-bar\\GoalDetails.js",["150"],"import {useEffect, useState} from 'react';\r\nimport goalManagement from '../../services/goalManagement.js';\r\n\r\n// This component is a child of DetailsBar that is shown whenever the user wants to update goal data.\r\n\r\n// NOTES ON PROPS PASSED TO THIS COMPONENT\r\n\r\n// token is set in App and used as credentials to make db queries\r\n// goals is defined in App and has shape { [list_id]: { fetchedOnce, data: [goal1,goal2,...] } }.\r\n// goals can be an empty object ie. goals = {}\r\n// goal data has shape: { list_id, goal_id, goal, note, status color }\r\n// selectedList is a list_id (i.e. positive number) which is defined in Main Page\r\n// goalSelected is a goal_id which is defined in Main Page and updated by Sticky\r\n// setGoalSelected is the setter for goalSelected\r\n// updateGoals is a synchronous function defined in App. This function forces App to query the db for all goals info. Note, this fn is not async.\r\n// setVisibility is a setter defined in DetailsBar. If visiblity is truthy, then detailsbar is shown and also the inverse of that statement. \r\n\r\n\r\n\r\n// Because DetailsBar is just moved off screen, we always need to have a goal selected for GoalDetails. We define a blank goal in case no goal is selected.\r\nconst blankGoal = { //blank goal in case no goal is selected\r\n    'goal_id': \"\",\r\n    'status': false,\r\n    'goal': \"\",\r\n    'deadline': '',\r\n    'note': '',\r\n    'color': ''\r\n}\r\n\r\nexport default function GoalDetails({ token, goals, selectedList, goalSelected, setGoalSelected, updateGoals, setVisibility }){\r\n\r\n    /*  \r\n     *  Using goalSelected, we create state for the goal object: theGoal.\r\n\r\n     *  If goals is an empty object or goalSelected is null or selectedList null, we will set theGoal = blankGoal.\r\n     *  Otherwise, we set theGoal to be the goal object.\r\n     * \r\n     *  We use the .find() method to define theGoal in the latter case. That method sometimes returns undefined.\r\n     *  In this case, we set theGoal = blankGoal.\r\n     * \r\n     *  Note, if goals = {}, then goals[selectedList].data.find( goal => goal===goalSelected ) will throw an error.\r\n     *  Hence, we need to make sure everything is defined properly before we attempt to define theGoal.\r\n     *  We check in this order:\r\n     *      that goals is not an empty object,\r\n     *      that selectedList is defined,\r\n     *      that the selectedList is a key in goals, \r\n     *      and that goals[selectedList].data is actually an array.\r\n     *  If all those are true, then we can safely call goals[selectedList].data.find( goal => goal===goalSelected )\r\n     *  without fear of error.\r\n     */\r\n\r\n\r\n\r\n    const initialGoal = Object.keys(goals).length && selectedList && goals[selectedList] && Array.isArray(goals[selectedList].data)\r\n        ? goals[selectedList].data.find( goal => goal['goal_id'] === goalSelected) || blankGoal\r\n        : blankGoal;\r\n\r\n    const [theGoal, setTheGoal] = useState(initialGoal);\r\n\r\n    \r\n    // This state is used to store onChange events for the input elements below.\r\n    const [updatedStatus, setUpdatedStatus] = useState(theGoal.status ? 1 : 0)\r\n    const [updatedGoal, setUpdatedGoal] = useState(theGoal.goal)\r\n    const [updatedNote, setUpdatedNote] = useState(theGoal.note===\"null\" || theGoal.note===\"undefined\" ? null : theGoal.note);\r\n    const [updatedColor, setUpdatedColor] = useState(theGoal.color)\r\n\r\n    useEffect( () => {\r\n        const nextGoal = Object.keys(goals).length && selectedList && goals[selectedList] && Array.isArray(goals[selectedList].data)\r\n            ? goals[selectedList].data.find( goal => goal['goal_id'] === goalSelected) || blankGoal\r\n            : blankGoal\r\n        setTheGoal(nextGoal);\r\n    }, [goalSelected])\r\n\r\n    useEffect( () => {\r\n        setUpdatedStatus(theGoal.status ? 1 : 0);\r\n        setUpdatedGoal(theGoal.goal);\r\n        setUpdatedNote(theGoal.note===\"null\" || theGoal.note===\"undefined\" ? \"\" : theGoal.note);\r\n        setUpdatedColor(theGoal.color);\r\n    }, [theGoal])\r\n\r\n\r\n    const handleSubmission = e => {\r\n        if (goalSelected) {\r\n            goalManagement.update(token, \r\n                theGoal['goal_id'], \r\n                updatedGoal, \r\n                theGoal.order_number, \r\n                theGoal.deadline, \r\n                updatedStatus, \r\n                updatedNote, \r\n                updatedColor)\r\n                .then( res => {\r\n                    setVisibility(false);\r\n                    updateGoals();\r\n                });\r\n        }\r\n    }\r\n\r\n    const handleHide = e => {\r\n        setVisibility(false);\r\n    }\r\n\r\n    const handleDelete = e => {\r\n        if (theGoal['goal_id']){\r\n            goalManagement.delete(token, theGoal['goal_id'])\r\n                .then(updateGoals)\r\n                .then( () => {setVisibility(false);});\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {/* Note, GoalBox, NoteBox and HighlightBox are defined below. */}\r\n            <div className=\"detail\" id=\"goal-box\"> \r\n                <GoalBox\r\n                    goal={updatedGoal}\r\n                    status={updatedStatus}\r\n                    updateGoal={setUpdatedGoal}\r\n                    updateStatus={setUpdatedStatus}\r\n                /> \r\n            </div>\r\n\r\n            <div className=\"detail\" id=\"note-box\">\r\n                <NoteBox \r\n                    note={updatedNote}\r\n                    updateNote={setUpdatedNote}/>\r\n            </div>\r\n            \r\n            <div className=\"detail\">\r\n                <HighlightBox color={updatedColor} setColor={setUpdatedColor} />\r\n            </div>\r\n            <div id=\"details-bar-buttons-container\">\r\n                <button onClick={handleSubmission}> Update </button>\r\n                <button onClick={handleHide}> Hide </button>\r\n                <button onClick={handleDelete}> Delete </button>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nfunction GoalBox({goal, status, updateGoal, updateStatus}){\r\n    return (\r\n        <>  \r\n            <label>\r\n                <input type=\"checkbox\" checked={status} onChange={ e => {updateStatus(e.target.checked ? 1 : 0)}} />\r\n                <span\r\n                    className=\"status-box\">\r\n                </span>\r\n                <textarea type=\"text\" value={goal} onChange={(e) => {updateGoal(e.target.value)}}/>\r\n            </label>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nfunction NoteBox({note, updateNote}){\r\n    return(\r\n        <>\r\n            <label>Note</label>\r\n            <textarea\r\n                placeholder = {note || \"Leave a note for your task\"}\r\n                value = {note}\r\n                onChange={(e) => {updateNote(e.target.value)}}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n// This component still needs work.\r\nfunction HighlightBox({color, setColor}){\r\n    return(\r\n        <>  <label> Highlight Color</label>\r\n            <select value={color ? color : null} onChange={ e => { setColor(e.target.value) } }>\r\n                <option value=\"null\"> None </option>\r\n                <option value=\"blue\"> Blue </option>\r\n                <option value=\"green\"> Green </option>  \r\n                <option value=\"orange\"> Orange </option>   \r\n                <option value=\"pink\"> Pink </option>  \r\n            </select>\r\n        </>\r\n    )\r\n}","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\details-bar\\ListDetails.js",["151"],"import {useEffect, useState} from 'react';\r\nimport listManagement from '../../services/listManagement.js';\r\n\r\n\r\n// This component is a child of DetailsBar that is shown whenever the user wants to rename a list.\r\n\r\n// NOTES ON PROPS PASSED TO THIS COMPONENT\r\n\r\n// token is set in App and used as credentials to make db queries\r\n// lists is set in App and has shape [ {list_id, list_name, order_number}, {list_id, list_name, order_number}, ...]\r\n// list data has shape { list_id, list_name, order_number }\r\n// selectedList is a list_id (i.e. positive number) which is defined in Main Page\r\n// updateLists is a synchronous function defined in App. This function forces App to query the db for all list info. Note, this fn is not async.\r\n// setVisibility is a setter defined in DetailsBar. If visiblity is truthy, then detailsbar is shown and also the inverse of that statement.\r\n// deleteList is defined in MainPage and handles deleting a list. Because we are using a relational db, we must delete all goals associated to a list before we delete the list itself.\r\n\r\nexport default function ListDetails({token, lists, selectedList, updateLists, setVisibility, handleDeleteList}){\r\n\r\n    const blankList = { 'list_id': \"\", 'list_name': \"\", \"order_number\": 1 }\r\n\r\n    // Note, lists is an array so lists.find() will always return an element of lists or undefined.\r\n    const initialList = lists.find(list => list['list_id'] === selectedList ) || blankList;\r\n    \r\n    // theList is a list object i.e. theList = {list_id, list_name, order_number}\r\n    const [theList, setTheList] = useState(initialList);\r\n\r\n    useEffect( () => {\r\n        const nextList = lists.find(list => list['list_id'] === selectedList ) || blankList;\r\n        setTheList(nextList);\r\n    }, [selectedList]);\r\n\r\n    const [updatedListName, setUpdatedListName] = useState(theList['list_name'])\r\n\r\n    const handleSubmission = async () => {\r\n        if (theList['list_id'] && updatedListName){\r\n            await listManagement.update(token, 'list_name', updatedListName, theList['list_id'])\r\n            updateLists();\r\n            setVisibility(false);\r\n        }\r\n        \r\n    }\r\n\r\n    const handleHide = () => {\r\n        setVisibility(false);\r\n    }\r\n\r\n    const handleDeleteListAndHide = e => {\r\n        handleDeleteList();\r\n        setVisibility(false);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"detail\" id=\"list-name-box\">\r\n                <input \r\n                    type=\"text\" \r\n                    placeholder={theList['list_name']}\r\n                    onChange={(e) => {setUpdatedListName(e.target.value)}}/>\r\n            </div>\r\n\r\n            <div id=\"details-bar-buttons-container\">\r\n                <button onClick={handleSubmission}> Update </button>\r\n                <button onClick={handleHide}> Hide </button>\r\n                <button onClick={handleDeleteListAndHide}> Delete </button>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n\r\n}","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\default-data.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\pages\\NewUserPage.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\services\\createTrialAccount.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\task\\HighlightedText.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\pages\\AccountMgmtPage.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\hooks\\useWindowDimensions.js",[],{"ruleId":"152","replacedBy":"153"},{"ruleId":"154","replacedBy":"155"},{"ruleId":"156","severity":1,"message":"157","line":9,"column":8,"nodeType":"158","messageId":"159","endLine":9,"endColumn":22},{"ruleId":"156","severity":1,"message":"160","line":10,"column":8,"nodeType":"158","messageId":"159","endLine":10,"endColumn":22},{"ruleId":"161","severity":1,"message":"162","line":80,"column":8,"nodeType":"163","endLine":80,"endColumn":18,"suggestions":"164"},{"ruleId":"161","severity":1,"message":"165","line":98,"column":8,"nodeType":"163","endLine":98,"endColumn":24,"suggestions":"166"},{"ruleId":"156","severity":1,"message":"167","line":234,"column":10,"nodeType":"158","messageId":"159","endLine":234,"endColumn":25},{"ruleId":"156","severity":1,"message":"168","line":2,"column":49,"nodeType":"158","messageId":"159","endLine":2,"endColumn":59},{"ruleId":"161","severity":1,"message":"169","line":57,"column":8,"nodeType":"163","endLine":57,"endColumn":28,"suggestions":"170"},{"ruleId":"161","severity":1,"message":"171","line":70,"column":8,"nodeType":"163","endLine":70,"endColumn":36,"suggestions":"172"},{"ruleId":"161","severity":1,"message":"173","line":149,"column":8,"nodeType":"163","endLine":149,"endColumn":56,"suggestions":"174"},{"ruleId":"161","severity":1,"message":"171","line":157,"column":8,"nodeType":"163","endLine":157,"endColumn":24,"suggestions":"175"},{"ruleId":"156","severity":1,"message":"176","line":299,"column":16,"nodeType":"158","messageId":"159","endLine":299,"endColumn":26},{"ruleId":"161","severity":1,"message":"177","line":63,"column":8,"nodeType":"163","endLine":63,"endColumn":15,"suggestions":"178"},{"ruleId":"156","severity":1,"message":"179","line":2,"column":9,"nodeType":"158","messageId":"159","endLine":2,"endColumn":18},{"ruleId":"156","severity":1,"message":"180","line":2,"column":20,"nodeType":"158","messageId":"159","endLine":2,"endColumn":28},{"ruleId":"161","severity":1,"message":"181","line":53,"column":8,"nodeType":"163","endLine":53,"endColumn":20,"suggestions":"182"},{"ruleId":"152","replacedBy":"183"},{"ruleId":"154","replacedBy":"184"},{"ruleId":"156","severity":1,"message":"185","line":14,"column":28,"nodeType":"158","messageId":"159","endLine":14,"endColumn":38},{"ruleId":"161","severity":1,"message":"186","line":31,"column":8,"nodeType":"163","endLine":31,"endColumn":10,"suggestions":"187"},{"ruleId":"152","replacedBy":"188"},{"ruleId":"154","replacedBy":"189"},{"ruleId":"156","severity":1,"message":"185","line":14,"column":28,"nodeType":"158","messageId":"159","endLine":14,"endColumn":38},{"ruleId":"161","severity":1,"message":"186","line":31,"column":8,"nodeType":"163","endLine":31,"endColumn":10,"suggestions":"190"},{"ruleId":"161","severity":1,"message":"191","line":17,"column":7,"nodeType":"163","endLine":17,"endColumn":9,"suggestions":"192"},{"ruleId":"152","replacedBy":"193"},{"ruleId":"154","replacedBy":"194"},{"ruleId":"161","severity":1,"message":"195","line":72,"column":8,"nodeType":"163","endLine":72,"endColumn":22,"suggestions":"196"},{"ruleId":"161","severity":1,"message":"197","line":30,"column":8,"nodeType":"163","endLine":30,"endColumn":22,"suggestions":"198"},"no-native-reassign",["199"],"no-negated-in-lhs",["200"],"no-unused-vars","'listManagement' is defined but never used.","Identifier","unusedVar","'userManagement' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'token' and 'updateGoals'. Either include them or remove the dependency array. If 'updateGoals' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["201"],"React Hook useEffect has missing dependencies: 'handleNewGoalCreation' and 'newTask'. Either include them or remove the dependency array.",["202"],"'RenameListInput' is defined but never used.","'useHistory' is defined but never used.","React Hook useEffect has a missing dependency: 'userAlreadyHasTrialAccount'. Either include it or remove the dependency array.",["203"],"React Hook useEffect has a missing dependency: 'token'. Either include it or remove the dependency array.",["204"],"React Hook useEffect has missing dependencies: 'goals' and 'token'. Either include them or remove the dependency array.",["205"],["206"],"'firstFetch' is defined but never used.","React Hook useEffect has missing dependencies: 'token' and 'updateLists'. Either include them or remove the dependency array. If 'updateLists' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["207"],"'useEffect' is defined but never used.","'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'fetch', 'initialFetch', 'source', and 'state'. Either include them or remove the dependency array. You can also do a functional update 'updateState(s => ...)' if you only need 'state' in the 'updateState' call.",["208"],["199"],["200"],"'removeItem' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'loginIdentifier' and 'store'. Either include them or remove the dependency array. If 'setLoginName' needs the current value of 'loginIdentifier', you can also switch to useReducer instead of useState and read 'loginIdentifier' in the reducer.",["209"],["199"],["200"],["210"],"React Hook useEffect has a missing dependency: 'callback'. Either include it or remove the dependency array.",["211"],["199"],["200"],"React Hook useEffect has missing dependencies: 'goals' and 'selectedList'. Either include them or remove the dependency array.",["212"],"React Hook useEffect has missing dependencies: 'blankList' and 'lists'. Either include them or remove the dependency array.",["213"],"no-global-assign","no-unsafe-negation",{"desc":"214","fix":"215"},{"desc":"216","fix":"217"},{"desc":"218","fix":"219"},{"desc":"220","fix":"221"},{"desc":"222","fix":"223"},{"desc":"224","fix":"225"},{"desc":"226","fix":"227"},{"desc":"228","fix":"229"},{"desc":"230","fix":"231"},{"desc":"230","fix":"232"},{"desc":"233","fix":"234"},{"desc":"235","fix":"236"},{"desc":"237","fix":"238"},"Update the dependencies array to be: [theGoals, token, updateGoals]",{"range":"239","text":"240"},"Update the dependencies array to be: [enterKeyIsDown, handleNewGoalCreation, newTask]",{"range":"241","text":"242"},"Update the dependencies array to be: [createTrialAccount, userAlreadyHasTrialAccount]",{"range":"243","text":"244"},"Update the dependencies array to be: [token, userAlreadyHasTrialAccount]",{"range":"245","text":"246"},"Update the dependencies array to be: [initialFetchDone, selectedList, retrievedGoals, goals, token]",{"range":"247","text":"248"},"Update the dependencies array to be: [retrievedLists, token]",{"range":"249","text":"250"},"Update the dependencies array to be: [lists, token, updateLists]",{"range":"251","text":"252"},"Update the dependencies array to be: [configHash, fetch, initialFetch, source, state]",{"range":"253","text":"254"},"Update the dependencies array to be: [loginIdentifier, store]",{"range":"255","text":"256"},{"range":"257","text":"256"},"Update the dependencies array to be: [callback]",{"range":"258","text":"259"},"Update the dependencies array to be: [goalSelected, goals, selectedList]",{"range":"260","text":"261"},"Update the dependencies array to be: [blankList, lists, selectedList]",{"range":"262","text":"263"},[4066,4076],"[theGoals, token, updateGoals]",[4705,4721],"[enterKeyIsDown, handleNewGoalCreation, newTask]",[2112,2132],"[createTrialAccount, userAlreadyHasTrialAccount]",[2584,2612],"[token, userAlreadyHasTrialAccount]",[6052,6100],"[initialFetchDone, selectedList, retrievedGoals, goals, token]",[6311,6327],"[retrievedLists, token]",[3226,3233],"[lists, token, updateLists]",[1322,1334],"[configHash, fetch, initialFetch, source, state]",[1306,1308],"[loginIdentifier, store]",[1306,1308],[488,490],"[callback]",[3675,3689],"[goalSelected, goals, selectedList]",[1757,1771],"[blankList, lists, selectedList]"]