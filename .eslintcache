[{"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\index.js":"1","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\dummy-data.js":"2","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\task\\task.js":"3","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\sticky\\Sticky.js":"4","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\app.js":"5","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\stickies-bar\\StickiesBar.js":"6","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\details-bar\\DetailsBar.js":"7","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\hooks\\useAPI.js":"8","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\login\\Login.js":"9","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\hooks\\useLocalStorage.js":"10","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\register\\Register.js":"11","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\pages\\MainPage.js":"12","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\pages\\LoginPage.js":"13","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\pages\\RegisterPage.js":"14","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\login\\login.js":"15","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\services\\listManagement.js":"16","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\services\\goalManagement.js":"17","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\hooks\\useKeyDown.js":"18","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\services\\userManagement.js":"19","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\task\\OrderButtons.js":"20","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\details-bar\\GoalDetails.js":"21","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\details-bar\\ListDetails.js":"22"},{"size":133,"mtime":1615407378066,"results":"23","hashOfConfig":"24"},{"size":578,"mtime":1614370485921,"results":"25","hashOfConfig":"24"},{"size":3187,"mtime":1617752749569,"results":"26","hashOfConfig":"24"},{"size":9884,"mtime":1617752929031,"results":"27","hashOfConfig":"24"},{"size":10893,"mtime":1617557847145,"results":"28","hashOfConfig":"24"},{"size":2975,"mtime":1617754609168,"results":"29","hashOfConfig":"24"},{"size":2934,"mtime":1617741209673,"results":"30","hashOfConfig":"24"},{"size":2143,"mtime":1616615550478,"results":"31","hashOfConfig":"24"},{"size":3430,"mtime":1616607116628,"results":"32","hashOfConfig":"24"},{"size":375,"mtime":1616605752832,"results":"33","hashOfConfig":"24"},{"size":3105,"mtime":1616612438520,"results":"34","hashOfConfig":"24"},{"size":4761,"mtime":1617753324097,"results":"35","hashOfConfig":"24"},{"size":703,"mtime":1616614926257,"results":"36","hashOfConfig":"24"},{"size":702,"mtime":1616614975515,"results":"37","hashOfConfig":"24"},{"size":3430,"mtime":1616607116628,"results":"38","hashOfConfig":"24"},{"size":1380,"mtime":1616706760059,"results":"39","hashOfConfig":"24"},{"size":1889,"mtime":1617037433929,"results":"40","hashOfConfig":"24"},{"size":521,"mtime":1616781887140,"results":"41","hashOfConfig":"24"},{"size":1450,"mtime":1617035094777,"results":"42","hashOfConfig":"24"},{"size":319,"mtime":1617119333608,"results":"43","hashOfConfig":"24"},{"size":6547,"mtime":1617741807075,"results":"44","hashOfConfig":"24"},{"size":2658,"mtime":1617753277146,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"1heis9t",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"51"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"48"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"48"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"48"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"48"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"48"},"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\index.js",[],["102","103"],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\dummy-data.js",[],["104","105"],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\task\\task.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\sticky\\Sticky.js",["106","107","108","109","110"],"import {useState, useEffect} from 'react';\r\nimport '../../component-styles/sticky.css';\r\n\r\nimport Task from '../task/task.js';\r\n\r\nimport React from 'react';\r\n\r\nimport goalManagement from '../../services/goalManagement.js';\r\nimport listManagement from '../../services/listManagement.js';\r\nimport userManagement from '../../services/userManagement.js';\r\n\r\nimport useKeyDown from '../../hooks/useKeyDown.js';\r\n\r\n\r\nexport default function Sticky({theList, theGoals, token, goalSelected, setGoalSelected, getListDetails, setGetListDetails, updateGoals, updateLists, detailsBarIsVisible, setDetailsBarIsVisible}){\r\n    const enterKeyIsDown = useKeyDown('Enter'); // We would like for the user to be able create a new goal using \"Enter\" key\r\n\r\n    // Shape of theGoals: { fetchedOnce, data }\r\n\r\n    const [goals, setGoals] = useState(theGoals ? theGoals.data : []);\r\n\r\n    useEffect( () => {\r\n        const newGoals = theGoals ? {...theGoals} : {fetchedOnce: false, data: []}\r\n        setGoals(newGoals.data)\r\n    }, [theGoals]);\r\n\r\n\r\n    // if the goals aren't sorted, handle sorting\r\n    useEffect( () => {\r\n        // Note, we define an async function and then call it to make sure our db updates happen in a given order\r\n        // If we modify this in the future, take this note into consideration.\r\n\r\n        const asyncEffect = async () => {\r\n\r\n            // If order numbers are inconsistent, we will update db and the rerender app.\r\n            // If order numbers are consistent, we will sort theGoals and store as state.\r\n\r\n            const reliableGoals = theGoals ? {...theGoals} : {fetchedOnce: false, data: []}\r\n\r\n            // containsRepeats returns a boolean representing if the arr contains repeats\r\n            const repeatsExist = containsRepeats(reliableGoals.data.map(goal => goal['order_number']));\r\n            const gapsExist = reliableGoals.data.filter( goal => goal['order_number'] >= reliableGoals.data.length).length;\r\n\r\n            // If no gaps exist, then every element has order number less than the length.\r\n            // If there are no repeats and no gaps, then theGoals.data.map(goal => goal['order_number']) = [0,1,2,3, ..., theGoals.length - 1];\r\n            const sortingNeeded = gapsExist || repeatsExist;\r\n            \r\n            if (sortingNeeded) {\r\n                for (let i=0; i < reliableGoals.data.length; i++){                \r\n                    await goalManagement.update( token,\r\n                        reliableGoals.data[i]['goal_id'], //goalId\r\n                        reliableGoals.data[i]['goal'], //goal\r\n                        i, //orderNumber.\r\n                        reliableGoals.data[i]['deadline'], //deadline\r\n                        reliableGoals.data[i]['status'], //status\r\n                        reliableGoals.data[i]['note'], //note\r\n                        reliableGoals.data[i]['color'], //color\r\n                    )\r\n                }\r\n\r\n                return updateGoals();\r\n            }\r\n\r\n            // If sorting not needed ...\r\n            const sorted = [...reliableGoals.data].sort( (a,b) => a['order_number'] - b['order_number']);\r\n            setGoals(sorted);\r\n        }\r\n\r\n        asyncEffect();\r\n\r\n    }, [theGoals])\r\n\r\n    const [newTask, setNewTask] = useState(\"\");\r\n    const [renameList, setRenameList] = useState(false)\r\n    const [newListName, setNewListName] = useState(\"\");\r\n\r\n    const handleNewGoalCreation = async e => {\r\n        await goalManagement.create(token, theList['list_id'], newTask, theGoals.data.length+1);\r\n        setNewTask(\"\");\r\n        updateGoals();\r\n    }\r\n\r\n    const handleListUpdate = async e => {\r\n        setRenameList(false);\r\n        await listManagement.update(token, 'list_name', newListName, theList['list_id']);\r\n        setNewListName(\"\");\r\n        updateLists();\r\n    }\r\n\r\n    const handleListDeletion = async e => {\r\n        if (theGoals.data.length){\r\n            const idsArray = theGoals.data.map(goal => goal['goal_id']);\r\n            await goalManagement.deleteMany(token, idsArray);\r\n        }\r\n        await listManagement.delete(token, theList['list_id']);\r\n        await userManagement.update(token, 'selected_list', null);\r\n        updateLists();\r\n    }\r\n\r\n    useEffect( () => { // Note, we had some trouble using onKeyDown, so we make use of useEffect to handle the keydown \"event\".\r\n        if (enterKeyIsDown && newTask)\r\n        {\r\n            handleNewGoalCreation();\r\n        }\r\n    }, [enterKeyIsDown])\r\n\r\n    const handleIncreasePriority = (id) => {\r\n        // Here, we will update the priority in the db and then update the app\r\n\r\n        const targetIndex = goals.findIndex( goal => goal['goal_id'] === id);\r\n\r\n        // If target is the first element of the array OR for some reason the id is not found\r\n        if (targetIndex<=0) return;\r\n\r\n        // Otherwise,\r\n        \r\n        const targetGoal = goals[targetIndex];\r\n        const previousGoal = goals[targetIndex - 1]; // Note, if the function reaches here, targetIndex - 1 >= 0\r\n\r\n        goalManagement.update(token,\r\n            targetGoal['goal_id'],\r\n            targetGoal['goal'],\r\n            targetIndex - 1,\r\n            targetGoal['deadline'],\r\n            targetGoal['status'],\r\n            targetGoal['note'],\r\n            targetGoal['color']\r\n        ).then(res => {\r\n                return goalManagement.update(token,\r\n                    previousGoal['goal_id'],\r\n                    previousGoal['goal'],\r\n                    targetIndex,\r\n                    previousGoal['deadline'],\r\n                    previousGoal['status'],\r\n                    previousGoal['note'],\r\n                    previousGoal['color']\r\n                );\r\n            })\r\n        .then( res => {\r\n            return updateGoals();\r\n        })\r\n    }\r\n\r\n    const handleDecreasePriority = (id) => {\r\n        // Here, we will update the priority in the db and then update the app\r\n\r\n        const targetIndex = goals.findIndex( goal => goal['goal_id'] === id); \r\n\r\n        // If target is the last element of the array OR for some reason the id is not found\r\n        \r\n        if (targetIndex<0 || targetIndex===goals.length - 1) return;\r\n\r\n        // Otherwise,\r\n        \r\n        const targetGoal = goals[targetIndex];\r\n        const nextGoal = goals[targetIndex + 1]; // Note, if the function reaches here, targetIndex - 1 >= 0\r\n\r\n        goalManagement.update(token,\r\n            targetGoal['goal_id'],\r\n            targetGoal['goal'],\r\n            targetIndex + 1,\r\n            targetGoal['deadline'],\r\n            targetGoal['status'],\r\n            targetGoal['note'],\r\n            targetGoal['color']\r\n        ).then( res => {\r\n            return goalManagement.update(token,\r\n                nextGoal['goal_id'],\r\n                nextGoal['goal'],\r\n                targetIndex,\r\n                nextGoal['deadline'],\r\n                nextGoal['status'],\r\n                nextGoal['note'],\r\n                nextGoal['color']\r\n            );\r\n        })\r\n        .then( res => {\r\n            updateGoals();\r\n        });\r\n\r\n    }\r\n\r\n    const handleListDetails = e => {\r\n        // getListDetails is false and detailsBarIsVisibile is false\r\n        // getListDetails is false and detailsBarIsVisible is true\r\n        // getListDetails is true\r\n        \r\n        if (getListDetails){\r\n            \r\n            setDetailsBarIsVisible(!detailsBarIsVisible)\r\n            // This timeout is because of a visual bug.\r\n            setTimeout(() => {setGetListDetails(false);}, 500)\r\n        }\r\n        if (!getListDetails && !detailsBarIsVisible){\r\n            setDetailsBarIsVisible(true);\r\n            setGetListDetails(true);        \r\n        }\r\n\r\n        if (!getListDetails && detailsBarIsVisible){\r\n            setGetListDetails(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"sticky\" id=\"sticky\"> {/* why do I have redundant class and id*/}\r\n            <h3\r\n                onClick={ handleListDetails}\r\n            > \r\n                {theList['list_name']}\r\n            </h3>\r\n            <button onClick={handleListDeletion}> Delete This List </button>\r\n            <ul>\r\n                {goals.map(\r\n                    (goal,index) => \r\n                        <Task \r\n                            token={token}\r\n                            goal={goal}\r\n                            goalSelected={goalSelected}\r\n                            setGoalSelected={setGoalSelected}\r\n                            handleIncreasePriority={handleIncreasePriority}\r\n                            handleDecreasePriority={handleDecreasePriority}\r\n                            updateGoals={updateGoals}\r\n                            getListDetails={getListDetails}\r\n                            setGetListDetails={setGetListDetails}\r\n                            detailsBarIsVisible={detailsBarIsVisible}\r\n                            setDetailsBarIsVisible={setDetailsBarIsVisible}\r\n                        />)}\r\n            </ul>\r\n            <span className=\"new-task\">\r\n                <button onClick={handleNewGoalCreation}>\r\n                    +\r\n                </button> \r\n\r\n                <input type=\"text\" value={newTask} onChange={ e => setNewTask( e.target.value)}/>\r\n            </span>\r\n\r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nfunction RenameListInput({setNewListName, updateList}){\r\n    return (\r\n        <>\r\n            <input type=\"text\" placeholder=\"New List Name\" onChange={ e => { setNewListName(e.target.value); }}/>\r\n            <button onClick={updateList}> Update </button>\r\n        </>\r\n    );\r\n}\r\n\r\n// Helper function for ordering goals/lists\r\nfunction containsRepeats(arr){\r\n    if (!Array.isArray(arr)) return undefined;\r\n    \r\n    let newArr = [];\r\n\r\n    for (let index =0; index < arr.length; index++){\r\n        if ( newArr.includes(arr[index]) ) return true;\r\n        newArr.push(arr[index]);\r\n    }\r\n\r\n    return false;\r\n}","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\app.js",["111","112","113"],"import React, {useEffect, useState} from 'react';\r\n\r\nimport MainPage from './pages/MainPage.js';\r\nimport LoginPage from './pages/LoginPage.js';\r\nimport RegisterPage from './pages/RegisterPage.js';\r\n\r\nimport userManagement from '../services/userManagement.js';\r\n\r\n\r\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\r\n\r\nimport axios from 'axios';\r\n\r\nconst getUserRoute = '/api/me';\r\nconst getListsRoute = '/api/lists/me';\r\nconst getGoalsRoute = '/api/goals/me';\r\n\r\n\r\n// This component will perform all the of the db queries and route to all of the pages to our site.\r\n\r\n\r\nexport default function App(){\r\n    \r\n    \r\n    /*\r\n        When one logs in, the token will be stored in this component\r\n        Then, main page can use the token to get user data.\r\n        \r\n    */\r\n   // Note, use local storage for token\r\n\r\n    const [token, setToken] = useState(\"\");\r\n\r\n    const updateToken = (token) => {\r\n        setToken(token);\r\n    }\r\n\r\n    // We will pass setter functions here to children components so that they can request for the db to be queried.\r\n    const [initialFetchDone, setInitialFetchDone] = useState(false);\r\n    const [retrievedLists,setRetrievedLists] = useState(false);\r\n    const [retrievedGoals,setRetrievedGoals] = useState(false);\r\n\r\n\r\n    // This is our state for storing db query results\r\n    const [username, setUsername] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n\r\n    const [lists, setLists] = useState([]); // An array of objects each of which represents a list. Shape: {listId, listName, orderNumber}\r\n    const [selectedList, setSelectedList] = useState(0); // This should be the list id number\r\n    const [goals, setGoals] = useState({}); // An object with key-value pairs for each list. \r\n    // the shape: goals[list_id] = { fetchedOnce, data=[goal0, goal1, ...] }\r\n    // each goal has shape: {goalId, listId, goal, orderNumber, deadline, status, note, color}\r\n\r\n    // handle first fetch\r\n    // We will do a first fetch whenever the token changes.\r\n    useEffect( () => {\r\n        if (token) {\r\n            const retrieveData = async () => {\r\n                //await firstFetch({token, setUsername, setEmail, setSelectedList, setLists, setGoals});\r\n                \r\n                //setRetrievedLists(true);\r\n                //setInitialFetchDone(true);\r\n                let goalsData = {}\r\n                const [userData, listData] = await efficientFetch({token});\r\n\r\n                setUsername(userData.username);\r\n\r\n                setEmail(userData.email);\r\n\r\n                setLists(listData);\r\n                const selectedListExists = listData.find( list => list['list_id'] === userData['selected_list']);\r\n\r\n                // If the selectedList doesn't exist, we will need to manually update selectedList.\r\n                if (!selectedListExists){\r\n                    // If listData = [], ...\r\n                    if (!listData.length){\r\n                        userManagement.update(token, 'selected_list', 0);\r\n                    } else {\r\n                        // Otherwise ...\r\n                        userManagement.update(token, 'selected_list', listData[0]['selected_list']);\r\n                        setSelectedList(listData[0]['list_id']);\r\n                    }\r\n                    \r\n                } else {\r\n                    setSelectedList( selectedListExists['list_id'] ); \r\n                }\r\n\r\n                listData.map( list => {\r\n                    let listId = list['list_id'];\r\n                    return goalsData[listId] = { \r\n                        fetchedOnce: false,\r\n                        data: []\r\n                    };\r\n                });\r\n            \r\n                setGoals(goalsData);\r\n\r\n                setRetrievedLists(true);\r\n                setInitialFetchDone(true);\r\n\r\n            }\r\n\r\n            retrieveData();\r\n\r\n        }\r\n    }, [token])\r\n    \r\n    // handle calls for goals updates\r\n    useEffect( () => {\r\n        // We only want the code to execute in a few scenarios:\r\n        // If retrievedGoals has been set to false\r\n        // OR\r\n        // If selectedList changes and the goal data has not been fetched, then this will execute \r\n        const goalsNeedRetrieval = !retrievedGoals || !goals[selectedList] || !goals[selectedList].fetchedOnce;\r\n\r\n        if (initialFetchDone && token && goalsNeedRetrieval ){\r\n            grabGoalsData({token, selectedList, goals, setGoals});\r\n            setRetrievedGoals(true);\r\n        }\r\n\r\n    }, [initialFetchDone, selectedList, retrievedGoals]);\r\n\r\n    // handle calls for lists updates\r\n    useEffect( () => {\r\n\r\n        if (token && !retrievedLists){\r\n            grabListsData({token, setLists})\r\n            setRetrievedLists(true);\r\n        }\r\n    }, [retrievedLists]);\r\n\r\n    const updateApp = () => {\r\n        setRetrievedGoals(false);\r\n    }\r\n\r\n    const updateGoals = () => {\r\n        setRetrievedGoals(false);\r\n    }\r\n\r\n    const updateLists = () => {\r\n        setRetrievedLists(false);\r\n    }\r\n\r\n\r\n    return(\r\n        <>\r\n            <Router>\r\n                <Switch>\r\n                    <Route exact path=\"/\">\r\n                        <MainPage\r\n                            token={token}\r\n                            username={username}\r\n                            email={email} \r\n                            lists={lists}\r\n                            selectedList={selectedList}\r\n                            setSelectedList={setSelectedList}\r\n                            goals={goals}\r\n                            updateApp={updateApp}\r\n                            updateGoals={updateGoals}\r\n                            updateLists={updateLists}\r\n                        />\r\n                    </Route>\r\n                    <Route exact path=\"/login\">\r\n                        <LoginPage updateToken={updateToken}/>\r\n                    </Route>\r\n                    <Route exact path=\"/register\">\r\n                        <RegisterPage updateToken={updateToken}/>\r\n                    </Route>\r\n                </Switch>\r\n            </Router>\r\n\r\n\r\n\r\n        </>\r\n\r\n    )\r\n}\r\n\r\n\r\n/*\r\n    This function takes in a token and returns the user's data.\r\n    The expected shape is:\r\n        [\r\n            userData = {username, email},\r\n            listData = [{list_id, list_name, order_number}, {...}, ..., {...}],\r\n            goalsData = [[goalData1, goalData2, ....], [...], ..., [...]]\r\n        ]\r\n    Note, listData.length === goalsData.length and the order is the same.\r\n*/\r\n\r\n\r\n\r\nasync function grabListsData({token, setLists}){\r\n\r\n    let listData;\r\n\r\n    const getListsConfig = {\r\n        method: 'get',\r\n        url: getListsRoute,\r\n        headers: {\r\n            'x-access-token': token\r\n        }\r\n    }\r\n\r\n    await axios(getListsConfig)\r\n        .then( res => {\r\n            // We are just capturing the results and storing them in listData\r\n            return listData = res.data.results;\r\n        });\r\n    setLists(listData);\r\n}\r\n\r\nasync function grabGoalsData({token, selectedList, goals, setGoals}){\r\n\r\n    // if selectedList is zero, then we will not update goals at all\r\n    if (!selectedList){\r\n        return;\r\n    }\r\n\r\n    // Otherwise, ...\r\n    // Note, if selectedList has not be verified yet, then this will not throw an error. And, that's good!\r\n    let goalsData = {...goals}\r\n    const config= {\r\n        method: 'get',\r\n        url: getGoalsRoute,\r\n        params: { listId: selectedList},\r\n        headers: {\r\n            'x-access-token': token,\r\n        }\r\n    }\r\n\r\n    await axios(config)\r\n        .then( res => {\r\n            // If selectedList is not already a key in goals, then we need to add it\r\n            if (!goalsData[selectedList]){\r\n                goalsData[selectedList]={\r\n                    fetchedOnce: false, data: []\r\n                }\r\n            }\r\n\r\n            // Reading this key-value pair everytime and writing sometimes should be faster than just writing every time \r\n            if (!goalsData[selectedList].fetchedOnce) {goalsData[selectedList].fetchedOnce = true;}\r\n            goalsData[selectedList].data= res.data.results;\r\n        });\r\n    setGoals(goalsData);\r\n}\r\n\r\nasync function firstFetch({token, setUsername, setEmail, setSelectedList, setLists, setGoals}){\r\n\r\n    // on first fetch: grab user data, grab list data, handle selectedList, make goals obj,\r\n\r\n    let userData;\r\n    let listData;\r\n    let goalsData={};\r\n\r\n    const getUserConfig = {\r\n        method: 'get',\r\n        url: getUserRoute,\r\n        headers: {\r\n            'x-access-token': token,\r\n        }\r\n    }\r\n    const getListsConfig = {\r\n        method: 'get',\r\n        url: getListsRoute,\r\n        headers: {\r\n            'x-access-token': token\r\n        }\r\n    }\r\n\r\n    await axios(getUserConfig)\r\n        .then( res => {\r\n            // We are just capturing the results and storing them in userData\r\n            return userData = res.data.results;\r\n        });\r\n    setUsername(userData.username);   \r\n    setEmail(userData.email);\r\n\r\n    const selectedList= userData['selected_list'];\r\n\r\n    await axios(getListsConfig)\r\n        .then( res => {\r\n            // We are just capturing the results and storing them in listData\r\n            return listData = res.data.results;\r\n        });\r\n    setLists(listData);\r\n\r\n    // We need to manually check that the selectedList exists because we can't have a circular reference in our db.\r\n\r\n    const selectedListExists = listData.find( list => list['list_id'] === selectedList);\r\n\r\n    // If the selectedList doesn't exist, we will need to manually update selectedList.\r\n    if (!selectedListExists){\r\n        // If listData = [], ...\r\n        if (!listData.length){\r\n            await userManagement.update(token, 'selected_list', 0);\r\n        }\r\n        // Otherwise ...\r\n        await userManagement.update(token, 'selected_list', listData[0]['selected_list']);\r\n        setSelectedList(listData[0]['list_id']);\r\n    } else {\r\n        setSelectedList( selectedList ); \r\n    }\r\n\r\n    // For each list, we are going to add key-value pair to goalsData.\r\n    // When we actually fetch the goalsData, we will fill in this data.\r\n    listData.map( list => {\r\n        let listId = list['list_id'];\r\n        return goalsData[listId] = { \r\n            fetchedOnce: false,\r\n            data: []\r\n        };\r\n    });\r\n\r\n    setGoals(goalsData);\r\n}\r\n\r\n\r\nasync function GrabData(config){\r\n    return axios(config).then(res => res.data.results);\r\n}\r\n\r\nasync function efficientFetch({token}){\r\n\r\n    const getUserConfig = {\r\n        method: 'get',\r\n        url: getUserRoute,\r\n        headers: {\r\n            'x-access-token': token,\r\n        }\r\n    }\r\n    const getListsConfig = {\r\n        method: 'get',\r\n        url: getListsRoute,\r\n        headers: {\r\n            'x-access-token': token\r\n        }\r\n    }\r\n\r\n    return Promise.all([GrabData(getUserConfig), GrabData(getListsConfig)])\r\n}","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\stickies-bar\\StickiesBar.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\details-bar\\DetailsBar.js",["114","115"],"import \"../../component-styles/details-bar.css\";\r\nimport {useEffect, useState} from 'react';\r\n\r\nimport GoalDetails from './GoalDetails.js';\r\nimport ListDetails from './ListDetails.js';\r\n\r\n\r\n\r\n// This component is a child of MainPage that is shown whenever the user wants to update either list or goal data.\r\n\r\n// NOTES ON PROPS PASSED TO THIS COMPONENT\r\n\r\n// token is set in App and used as credentials to make db queries\r\n// goals is defined in App and has shape { [list_id]: { fetchedOnce, data: [goal1,goal2,...] } }.\r\n// goals can be an empty object ie. goals = {}\r\n// goal data has shape: { list_id, goal_id, goal, note, status color }\r\n// lists is set in App and has shape [ {list_id, list_name, order_number}, {list_id, list_name, order_number}, ...]\r\n// list data has shape { list_id, list_name, order_number }\r\n// selectedList is a list_id (i.e. positive number) which is defined in Main Page\r\n// goalSelected is a goal_id which is defined in Main Page and updated by Sticky\r\n// setGoalSelected is the setter for goalSelected\r\n// getListDetails is a boolean that represents whether use wants to update a list or not.\r\n// deleteList is defined in MainPage and handles deleting a list. Because we are using a relational db, we must delete all goals associated to a list before we delete the list itself.\r\n// updateLists is a synchronous function defined in App. This function forces App to query the db for all list info. Note, this fn is not async.\r\n// updateGoals is a synchronous function defined in App. This function forces App to query the db for all goals info. Note, this fn is not async.\r\n\r\n\r\n// Note, we are not implementing deadlines for the moment because not all browsers support that input type. We will implement this in the future.\r\n\r\n\r\nexport default function DetailsBar({token, goals, lists, selectedList, goalSelected, setGoalSelected, getListDetails, deleteList, updateGoals, updateLists, visibility, setVisibility}){\r\n    \r\n    return (\r\n        <div\r\n            id=\"details-bar\" \r\n            className={\r\n                visibility\r\n                    ? \"component-shown\"\r\n                    : \"component-hidden\"\r\n            }\r\n        >\r\n            {getListDetails \r\n                ? <ListDetails\r\n                    token={token}\r\n                    lists={lists}\r\n                    selectedList={selectedList}\r\n                    updateLists={updateLists}\r\n                    setVisibility={setVisibility}\r\n                    deleteList={deleteList}\r\n                />\r\n                : <GoalDetails \r\n                    token={token}\r\n                    goals={goals}\r\n                    selectedList={selectedList}\r\n                    goalSelected={goalSelected}\r\n                    setGoalSelected={setGoalSelected}\r\n                    updateGoals={updateGoals}\r\n                    setVisibility={setVisibility}\r\n                />\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\hooks\\useAPI.js",["116"],"import {useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\nimport hash from 'hash-object';\r\nconst CancelToken = axios.CancelToken;\r\n\r\n\r\n//this hook will allow us so streamline interacting with a rest api\r\n\r\n/*\r\nreturns\r\n    result, response, error, isLoading, fetch\r\n*/\r\n\r\nexport default function useAPI(config, initialFetch=true){\r\n    const [state, updateState] = useState({\r\n        response: undefined,\r\n        error: undefined,\r\n        isLoading: true\r\n    })\r\n\r\n    const configHash = hash(config);\r\n\r\n    const source = CancelToken.source();\r\n\r\n    function fetch(){\r\n        axios({\r\n            ...config, \r\n            cancelToken: source.token,\r\n            })\r\n        .then( res => {\r\n            updateState({ error: undefined, response: res, isLoading: false});\r\n        })\r\n        .catch( err => {\r\n            if (axios.isCancel(err)){\r\n                console.log('Request canceled by cleanup: ', err.message);\r\n            } else {\r\n                updateState({error: err, response: undefined, isLoading: false});\r\n            }\r\n        });\r\n    }\r\n\r\n    useEffect( () => {\r\n        updateState({...state, isLoading: true});\r\n\r\n        if (initialFetch){\r\n            fetch();\r\n        }\r\n\r\n        return () => {\r\n            source.cancel('useEffect cleanup.');\r\n        }\r\n\r\n    }, [configHash]);\r\n\r\n    const { response, error, isLoading} = state;\r\n\r\n    const data = response ? response.data : undefined;\r\n    return { data, response, error, isLoading, fetch };\r\n}\r\n\r\n/*\r\n\r\n    const config = {\r\n        \"method\":\"post\",\r\n        \"url\":\"api/login\",\r\n        \"headers\":{\r\n        \"Content-Type\":\"application/json\",\r\n        \"useQueryString\":true,\r\n        'rejectUnauthorized': false,\r\n        },\r\n        data: {\r\n            'username': 'tlane',\r\n            'password': 'some_password'\r\n        }\r\n    }\r\n    \r\n\r\n\r\n\r\n    const getData = async () => {\r\n        try{\r\n            return await axios(config)\r\n            .then( (res) => {\r\n                console.log('response',res);\r\n            })\r\n        } catch (e) {\r\n            console.log('error', e)\r\n        }\r\n    }\r\n\r\n    getData();\r\n\r\n*/","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\login\\Login.js",["117","118"],"import {useEffect, useState} from 'react';\r\nimport useLocalStorage from '../../hooks/useLocalStorage.js'\r\nimport FormData from 'form-data';\r\nimport axios from 'axios';\r\n\r\n\r\n// login route is the url for the post request\r\n// loginIdentifier is a string e.g. email or username\r\n// next is a callback that takes in the response object and tells axios what to do next\r\n// handleError is a callback that tkes in the error object and tells axios what to do next\r\nexport default function Login({loginRoute, loginIdentifier, next, handleError}){\r\n\r\n    // We use local storage for the \"Remember Me\" feature.\r\n    const [store, addItem, removeItem, clearStore] = useLocalStorage();\r\n\r\n\r\n    \r\n    // We need state for the login credentials so that we may pass that info into our custom form-submission handler.\r\n    const [loginName, setLoginName] = useState(\"\");\r\n    const [loginPassword, setLoginPassword] = useState(\"\");\r\n    const [rememberMe, setRememberMe] = useState(false);\r\n\r\n\r\n    // When this component first loads, it will check to see if localStorage has stored login info.\r\n    // If so, useEffect will automatically update the state.\r\n    useEffect( ()=> {\r\n        if (store[loginIdentifier]){\r\n            setRememberMe(true);\r\n            setLoginName(store[loginIdentifier]);\r\n        }\r\n    }, []);\r\n\r\n    const handleRememberMe = e => {\r\n        return setRememberMe(e.target.checked);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n\r\n        e.preventDefault(); // This stops the browser from handling the form on its own.\r\n\r\n        // Add loginName to localStorage if \"Remember Me\" box is checked.\r\n        if (rememberMe) {\r\n            addItem(loginIdentifier, loginName);\r\n        } else { // Otherwise, clear local storage.\r\n            clearStore();\r\n        }\r\n\r\n        const form = new FormData();\r\n        form.append(loginIdentifier, loginName);\r\n        form.append('password', loginPassword);\r\n\r\n        //reseting the password\r\n        setLoginPassword(\"\");\r\n        const config = {\r\n            method: 'post',\r\n            url: loginRoute,\r\n            data: form,\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data',\r\n            }\r\n        }\r\n\r\n        try {\r\n        axios(config)\r\n            .then( next )\r\n        } catch (e) {\r\n            handleError(e);\r\n        }\r\n    }\r\n\r\n    \r\n  \r\n  \r\n    return (\r\n        <form id=\"login\" onSubmit={handleSubmit}>\r\n            <label for={loginIdentifier}></label>\r\n            <input \r\n                type=\"text\"\r\n                value={loginName}\r\n                required \r\n                placeholder={loginIdentifier} \r\n                name={loginIdentifier} \r\n                onChange={ e => {return setLoginName(e.target.value)} }\r\n            />\r\n\r\n            <label for=\"password\"></label>\r\n            <input \r\n                type=\"password\" \r\n                value={loginPassword} \r\n                required \r\n                placeholder=\"password\" \r\n                name=\"password\" \r\n                onChange={ e => {return setLoginPassword(e.target.value)} }\r\n            />\r\n\r\n            <label for=\"remember-me\"> Remember Me </label>\r\n            <input \r\n                type=\"checkbox\" \r\n                name=\"remember-me\" \r\n                onChange={handleRememberMe}\r\n                checked={rememberMe}\r\n            />\r\n\r\n            <button type=\"submit\"> Login </button>\r\n        </form>\r\n    );\r\n}",["119","120"],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\hooks\\useLocalStorage.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\register\\Register.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\pages\\MainPage.js",["121","122"],"import React, {useState, useEffect} from 'react';\r\n\r\n\r\nimport Sticky from '../sticky/Sticky.js';\r\nimport StickiesBar from '../stickies-bar/StickiesBar.js';\r\nimport DetailsBar from '../details-bar/DetailsBar.js';\r\n\r\n\r\n\r\n\r\n/*\r\n    MainPage holds the current sticky, the details-bar and the stickies-bar.\r\n\r\n    MainPage will receieve lists, selectedList and goals from App.\r\n\r\n    MainPage serves to pass on the info to its children.\r\n\r\n    updateApp will force the main app fetch data again. We call this when we make changes to db.\r\n\r\n    I need to update selectedList to be a local storage thing\r\n*/\r\n\r\n\r\nconst blankList = { 'list_name': 'Create a New List', 'order_number': undefined}\r\n\r\nexport default function MainPage({token, lists, selectedList, setSelectedList, goals, updateApp, updateGoals, updateLists}){\r\n\r\n    \r\n    /*\r\n    Our data will be stored in a db. Ideally, we would like to query the database as few times as possible. If we query once, we will pull an array of columns. When we update these columns, react doesn't rerender; react fails to rerender because of the deeper shape of the array of columns. We introduce an artificial forceUpdate function to force rerenders.\r\n    */\r\n\r\n    const [, updateState] = React.useState();\r\n    const forceUpdate = React.useCallback(() => updateState({}), []);\r\n\r\n\r\n    const [allGoals, setAllGoals] = useState( goals ? {...goals} : {});\r\n\r\n    useEffect( () => {\r\n        setAllGoals(goals ? {...goals} : {});\r\n    }, [goals,lists])\r\n \r\n\r\n    // the current list might be undefined\r\n    const [currentList, setCurrentList] = useState(lists.find(list => list['list_id'] === selectedList) || blankList );\r\n\r\n    // whenever props update, update currentList\r\n    useEffect( () => {\r\n        setCurrentList( lists.find(list => list['list_id'] === selectedList )|| blankList);\r\n    }, [selectedList, lists]);\r\n\r\n    const [currentGoals, setCurrentGoals] = useState(allGoals[selectedList]);\r\n \r\n    // whenever props update, update currentGoals\r\n    useEffect( () => {\r\n        let updatedGoals = {}\r\n        // allGoals has shape: { listId: {goalData}, ... }\r\n        Object.keys(allGoals).map(\r\n            listId => {\r\n                updatedGoals[listId] = {};\r\n\r\n                return Object.keys(allGoals[listId]).map( (key) => {\r\n                    let newData = allGoals[listId][key];\r\n                    updatedGoals[listId][key] = Array.isArray(newData) ? [...newData] : newData;\r\n                    return newData;\r\n                });\r\n            }\r\n        )\r\n        setCurrentGoals(updatedGoals[selectedList]);\r\n    }, [selectedList, allGoals])\r\n\r\n\r\n    // goalSelected will be either null or a goal id.\r\n    const [goalSelected, setGoalSelected] = useState(null);\r\n    \r\n    const [getListDetails, setGetListDetails] = useState(false);\r\n\r\n    const [detailsBarIsVisible, setDetailsBarIsVisible] = useState(false);\r\n    const [stickiesBarIsVisible, setStickiesBarIsVisible] = useState(false);\r\n\r\n    return(\r\n        <>\r\n            <StickiesBar\r\n                token={token}\r\n                lists={lists}\r\n                selectedList={selectedList}\r\n                setSelectedList={setSelectedList}\r\n                visibility={stickiesBarIsVisible}\r\n                setGetListDetails={setGetListDetails}\r\n                updateApp={updateApp}\r\n                updateLists={updateLists}\r\n            />\r\n                   \r\n            <Sticky\r\n                token={token}\r\n                theList={currentList}\r\n                theGoals={currentGoals}\r\n                goalSelected={goalSelected}\r\n                setGoalSelected={(goalId) => {\r\n                    setGetListDetails(false);\r\n                    setGoalSelected(goalId);\r\n                }}\r\n                getListDetails={getListDetails}\r\n                setGetListDetails={setGetListDetails}\r\n                updateGoals={updateGoals}\r\n                updateLists={updateLists}\r\n                detailsBarIsVisible={detailsBarIsVisible}\r\n                setDetailsBarIsVisible={setDetailsBarIsVisible}\r\n            />\r\n \r\n            <DetailsBar \r\n                token={token}\r\n                goals={goals}\r\n                lists={lists}\r\n                selectedList={selectedList}\r\n                goalSelected={goalSelected}\r\n                setGoalSelected={setGoalSelected}\r\n                getListDetails={getListDetails}\r\n                deleteList={() => {console.log('deleteList has not been defined yet in MainPage')}}\r\n                visibility={detailsBarIsVisible}\r\n                setVisibility={setDetailsBarIsVisible}\r\n                updateApp={updateApp}\r\n                updateLists={updateLists}\r\n                updateGoals={updateGoals}\r\n            />   \r\n        </>\r\n    )\r\n}\r\n\r\n\r\n","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\pages\\LoginPage.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\pages\\RegisterPage.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\login\\login.js",["123","124"],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\services\\listManagement.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\services\\goalManagement.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\hooks\\useKeyDown.js",["125"],"import {useEffect, useState} from 'react';\r\n\r\n\r\nexport default function useKeyDown(targetKey){\r\n    const [keyDown, setKeyDown] = useState(false);\r\n \r\n    const callback = ({ key }) => {\r\n        if (key === targetKey) {\r\n            setKeyDown(true);\r\n            setTimeout( () => {setKeyDown(false)}, 500); \r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('keydown', callback);\r\n        return () => {window.removeEventListener('keydown', callback)}\r\n    },[]);\r\n    \r\n    return keyDown\r\n}","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\services\\userManagement.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\task\\OrderButtons.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\details-bar\\GoalDetails.js",["126","127"],"import {useEffect, useState} from 'react';\r\nimport goalManagement from '../../services/goalManagement.js';\r\n\r\n// This component is a child of DetailsBar that is shown whenever the user wants to update goal data.\r\n\r\n// NOTES ON PROPS PASSED TO THIS COMPONENT\r\n\r\n// token is set in App and used as credentials to make db queries\r\n// goals is defined in App and has shape { [list_id]: { fetchedOnce, data: [goal1,goal2,...] } }.\r\n// goals can be an empty object ie. goals = {}\r\n// goal data has shape: { list_id, goal_id, goal, note, status color }\r\n// selectedList is a list_id (i.e. positive number) which is defined in Main Page\r\n// goalSelected is a goal_id which is defined in Main Page and updated by Sticky\r\n// setGoalSelected is the setter for goalSelected\r\n// updateGoals is a synchronous function defined in App. This function forces App to query the db for all goals info. Note, this fn is not async.\r\n// setVisibility is a setter defined in DetailsBar. If visiblity is truthy, then detailsbar is shown and also the inverse of that statement. \r\n\r\n\r\n\r\n// Because DetailsBar is just moved off screen, we always need to have a goal selected for GoalDetails. We define a blank goal in case no goal is selected.\r\nconst blankGoal = { //blank goal in case no goal is selected\r\n    'goal_id': \"\",\r\n    'status': false,\r\n    'goal': \"\",\r\n    'deadline': '',\r\n    'note': '',\r\n    'color': ''\r\n}\r\n\r\nexport default function GoalDetails({ token, goals, selectedList, goalSelected, setGoalSelected, updateGoals, setVisibility }){\r\n\r\n    /*  \r\n     *  Using goalSelected, we create state for the goal object: theGoal.\r\n\r\n     *  If goals is an empty object or goalSelected is null or selectedList null, we will set theGoal = blankGoal.\r\n     *  Otherwise, we set theGoal to be the goal object.\r\n     * \r\n     *  We use the .find() method to define theGoal in the latter case. That method sometimes returns undefined.\r\n     *  In this case, we set theGoal = blankGoal.\r\n     * \r\n     *  Note, if goals = {}, then goals[selectedList].data.find( goal => goal===goalSelected ) will throw an error.\r\n     *  Hence, we need to make sure everything is defined properly before we attempt to define theGoal.\r\n     *  We check in this order:\r\n     *      that goals is not an empty object,\r\n     *      that selectedList is defined,\r\n     *      that the selectedList is a key in goals, \r\n     *      and that goals[selectedList].data is actually an array.\r\n     *  If all those are true, then we can safely call goals[selectedList].data.find( goal => goal===goalSelected )\r\n     *  without fear of error.\r\n     */\r\n\r\n\r\n\r\n    const initialGoal = Object.keys(goals).length && selectedList && goals[selectedList] && Array.isArray(goals[selectedList].data)\r\n        ? goals[selectedList].data.find( goal => goal['goal_id'] === goalSelected) || blankGoal\r\n        : blankGoal;\r\n\r\n    const [theGoal, setTheGoal] = useState(initialGoal);\r\n\r\n    \r\n    // This state is used to store onChange events for the input elements below.\r\n    const [updatedStatus, setUpdatedStatus] = useState(theGoal.status ? 1 : 0)\r\n    const [updatedGoal, setUpdatedGoal] = useState(theGoal.goal)\r\n    const [updatedNote, setUpdatedNote] = useState(theGoal.note)\r\n    const [updatedColor, setUpdatedColor] = useState(theGoal.color)\r\n\r\n\r\n    useEffect( () => {\r\n        const nextGoal = Object.keys(goals).length && selectedList && goals[selectedList] && Array.isArray(goals[selectedList].data)\r\n            ? goals[selectedList].data.find( goal => goal['goal_id'] === goalSelected) || blankGoal\r\n            : blankGoal\r\n        setTheGoal(nextGoal);\r\n    }, [goalSelected])\r\n\r\n    useEffect( () => {\r\n        setUpdatedStatus(theGoal.status ? 1 : 0)\r\n        setUpdatedGoal(theGoal.goal)\r\n        setUpdatedNote(theGoal.note)\r\n    }, [theGoal])\r\n\r\n\r\n    const handleSubmission = e => {\r\n        if (goalSelected) {\r\n            goalManagement.update(token, \r\n                theGoal['goal_id'], \r\n                updatedGoal, \r\n                theGoal.orderNumber, \r\n                theGoal.deadline, \r\n                updatedStatus, \r\n                updatedNote, \r\n                updatedColor)\r\n                .then( res => {updateGoals()});\r\n        }\r\n    }\r\n\r\n    const handleHide = e => {\r\n        setGoalSelected(false);\r\n    }\r\n\r\n    const handleDelete = e => {\r\n        if (theGoal['goal_id']){\r\n            goalManagement.delete(token, theGoal['goal_id'])\r\n                .then(updateGoals);\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {/* Note, GoalBox, NoteBox and HighlightBox are defined below. */}\r\n            <div className=\"detail\" id=\"goal-box\"> \r\n                <GoalBox\r\n                    goal={updatedGoal}\r\n                    status={updatedStatus}\r\n                    updateGoal={setUpdatedGoal}\r\n                    updateStatus={setUpdatedStatus}\r\n                /> \r\n            </div>\r\n\r\n            <div className=\"detail\" id=\"note-box\">\r\n                <NoteBox \r\n                    note={theGoal.note}\r\n                    updateNote={setUpdatedNote}/>\r\n            </div>\r\n            \r\n            <div className=\"detail\">\r\n                <HighlightBox highlight={theGoal.color}/>\r\n            </div>\r\n            \r\n            <button onClick={handleSubmission}> Update </button>\r\n            <button onClick={handleHide}> Hide </button>\r\n            <button onClick={handleDelete}> Delete </button>\r\n        </>\r\n    )\r\n}\r\n\r\nfunction GoalBox({goal, status, updateGoal, updateStatus}){\r\n    return (\r\n        <>  \r\n            <label>\r\n                <input type=\"checkbox\" checked={status} onChange={ e => {updateStatus(e.target.checked ? 1 : 0)}} />\r\n                <span\r\n                    className=\"status-box\">\r\n                </span>\r\n                <input type=\"text\" placeholder={goal} onChange={(e) => {updateGoal(e.target.value)}}/>\r\n            </label>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nfunction NoteBox({note, updateNote}){\r\n    return(\r\n        <>\r\n            <label>Note</label>\r\n            <textarea\r\n                placeholder = {note || \"Leave a note for your task\"}\r\n                onChange={(e) => {updateNote(e.target.value)}}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n// This component still needs work.\r\nfunction HighlightBox({highlight}){\r\n    return(\r\n        <>  <label> Highlight Color</label>\r\n            <select>\r\n                <option> Red </option>  \r\n                <option> Green </option>  \r\n                <option> Orange </option>  \r\n            </select>\r\n        </>\r\n    )\r\n}","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\details-bar\\ListDetails.js",["128"],"import {useEffect, useState} from 'react';\r\nimport listManagement from '../../services/listManagement.js';\r\n\r\n\r\n// This component is a child of DetailsBar that is shown whenever the user wants to rename a list.\r\n\r\n// NOTES ON PROPS PASSED TO THIS COMPONENT\r\n\r\n// token is set in App and used as credentials to make db queries\r\n// lists is set in App and has shape [ {list_id, list_name, order_number}, {list_id, list_name, order_number}, ...]\r\n// list data has shape { list_id, list_name, order_number }\r\n// selectedList is a list_id (i.e. positive number) which is defined in Main Page\r\n// updateLists is a synchronous function defined in App. This function forces App to query the db for all list info. Note, this fn is not async.\r\n// setVisibility is a setter defined in DetailsBar. If visiblity is truthy, then detailsbar is shown and also the inverse of that statement.\r\n// deleteList is defined in MainPage and handles deleting a list. Because we are using a relational db, we must delete all goals associated to a list before we delete the list itself.\r\n\r\nexport default function ListDetails({token, lists, selectedList, updateLists, setVisibility, deleteList}){\r\n\r\n    const blankList = { 'list_id': \"\", 'list_name': \"\", \"order_number\": 1 }\r\n\r\n    // Note, lists is an array so lists.find() will always return an element of lists or undefined.\r\n    const initialList = lists.find(list => list['list_id'] === selectedList ) || blankList;\r\n    \r\n    // theList is a list object i.e. theList = {list_id, list_name, order_number}\r\n    const [theList, setTheList] = useState(initialList);\r\n\r\n    useEffect( () => {\r\n        const nextList = lists.find(list => list['list_id'] === selectedList ) || blankList;\r\n        setTheList(nextList);\r\n    }, [selectedList]);\r\n\r\n    const [updatedListName, setUpdatedListName] = useState(theList['list_name'])\r\n\r\n    const handleSubmission = async () => {\r\n        if (theList['list_id'] && updatedListName){\r\n            await listManagement.update(token, 'list_name', updatedListName, theList['list_id'])\r\n            updateLists();\r\n            setVisibility(false);\r\n        }\r\n        \r\n    }\r\n\r\n    const handleHide = () => {\r\n        setVisibility(false);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"detail\" id=\"list-name-box\">\r\n                <input \r\n                    type=\"text\" \r\n                    placeholder={theList['list_name']}\r\n                    onChange={(e) => {setUpdatedListName(e.target.value)}}/>\r\n            </div>\r\n            <button onClick={handleSubmission}> Update </button>\r\n            <button onClick={handleHide}> Hide </button>\r\n        </>\r\n    )\r\n\r\n}",{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","replacedBy":"132"},{"ruleId":"129","replacedBy":"133"},{"ruleId":"131","replacedBy":"134"},{"ruleId":"135","severity":1,"message":"136","line":71,"column":8,"nodeType":"137","endLine":71,"endColumn":18,"suggestions":"138"},{"ruleId":"139","severity":1,"message":"140","line":74,"column":12,"nodeType":"141","messageId":"142","endLine":74,"endColumn":22},{"ruleId":"139","severity":1,"message":"143","line":83,"column":11,"nodeType":"141","messageId":"142","endLine":83,"endColumn":27},{"ruleId":"135","severity":1,"message":"144","line":105,"column":8,"nodeType":"137","endLine":105,"endColumn":24,"suggestions":"145"},{"ruleId":"139","severity":1,"message":"146","line":242,"column":10,"nodeType":"141","messageId":"142","endLine":242,"endColumn":25},{"ruleId":"135","severity":1,"message":"147","line":121,"column":8,"nodeType":"137","endLine":121,"endColumn":56,"suggestions":"148"},{"ruleId":"135","severity":1,"message":"149","line":130,"column":8,"nodeType":"137","endLine":130,"endColumn":24,"suggestions":"150"},{"ruleId":"139","severity":1,"message":"151","line":248,"column":16,"nodeType":"141","messageId":"142","endLine":248,"endColumn":26},{"ruleId":"139","severity":1,"message":"152","line":2,"column":9,"nodeType":"141","messageId":"142","endLine":2,"endColumn":18},{"ruleId":"139","severity":1,"message":"153","line":2,"column":20,"nodeType":"141","messageId":"142","endLine":2,"endColumn":28},{"ruleId":"135","severity":1,"message":"154","line":53,"column":8,"nodeType":"137","endLine":53,"endColumn":20,"suggestions":"155"},{"ruleId":"139","severity":1,"message":"156","line":14,"column":28,"nodeType":"141","messageId":"142","endLine":14,"endColumn":38},{"ruleId":"135","severity":1,"message":"157","line":31,"column":8,"nodeType":"137","endLine":31,"endColumn":10,"suggestions":"158"},{"ruleId":"129","replacedBy":"159"},{"ruleId":"131","replacedBy":"160"},{"ruleId":"139","severity":1,"message":"161","line":34,"column":11,"nodeType":"141","messageId":"142","endLine":34,"endColumn":22},{"ruleId":"139","severity":1,"message":"162","line":79,"column":34,"nodeType":"141","messageId":"142","endLine":79,"endColumn":57},{"ruleId":"139","severity":1,"message":"156","line":14,"column":28,"nodeType":"141","messageId":"142","endLine":14,"endColumn":38},{"ruleId":"135","severity":1,"message":"157","line":31,"column":8,"nodeType":"137","endLine":31,"endColumn":10,"suggestions":"163"},{"ruleId":"135","severity":1,"message":"164","line":17,"column":7,"nodeType":"137","endLine":17,"endColumn":9,"suggestions":"165"},{"ruleId":"139","severity":1,"message":"166","line":65,"column":26,"nodeType":"141","messageId":"142","endLine":65,"endColumn":41},{"ruleId":"135","severity":1,"message":"167","line":73,"column":8,"nodeType":"137","endLine":73,"endColumn":22,"suggestions":"168"},{"ruleId":"135","severity":1,"message":"169","line":30,"column":8,"nodeType":"137","endLine":30,"endColumn":22,"suggestions":"170"},"no-native-reassign",["171"],"no-negated-in-lhs",["172"],["171"],["172"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'token' and 'updateGoals'. Either include them or remove the dependency array. If 'updateGoals' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["173"],"no-unused-vars","'renameList' is assigned a value but never used.","Identifier","unusedVar","'handleListUpdate' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'handleNewGoalCreation' and 'newTask'. Either include them or remove the dependency array.",["174"],"'RenameListInput' is defined but never used.","React Hook useEffect has missing dependencies: 'goals' and 'token'. Either include them or remove the dependency array.",["175"],"React Hook useEffect has a missing dependency: 'token'. Either include it or remove the dependency array.",["176"],"'firstFetch' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'fetch', 'initialFetch', 'source', and 'state'. Either include them or remove the dependency array. You can also do a functional update 'updateState(s => ...)' if you only need 'state' in the 'updateState' call.",["177"],"'removeItem' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'loginIdentifier' and 'store'. Either include them or remove the dependency array. If 'setLoginName' needs the current value of 'loginIdentifier', you can also switch to useReducer instead of useState and read 'loginIdentifier' in the reducer.",["178"],["171"],["172"],"'forceUpdate' is assigned a value but never used.","'setStickiesBarIsVisible' is assigned a value but never used.",["179"],"React Hook useEffect has a missing dependency: 'callback'. Either include it or remove the dependency array.",["180"],"'setUpdatedColor' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'goals' and 'selectedList'. Either include them or remove the dependency array.",["181"],"React Hook useEffect has missing dependencies: 'blankList' and 'lists'. Either include them or remove the dependency array.",["182"],"no-global-assign","no-unsafe-negation",{"desc":"183","fix":"184"},{"desc":"185","fix":"186"},{"desc":"187","fix":"188"},{"desc":"189","fix":"190"},{"desc":"191","fix":"192"},{"desc":"193","fix":"194"},{"desc":"193","fix":"195"},{"desc":"196","fix":"197"},{"desc":"198","fix":"199"},{"desc":"200","fix":"201"},"Update the dependencies array to be: [theGoals, token, updateGoals]",{"range":"202","text":"203"},"Update the dependencies array to be: [enterKeyIsDown, handleNewGoalCreation, newTask]",{"range":"204","text":"205"},"Update the dependencies array to be: [initialFetchDone, selectedList, retrievedGoals, goals, token]",{"range":"206","text":"207"},"Update the dependencies array to be: [retrievedLists, token]",{"range":"208","text":"209"},"Update the dependencies array to be: [configHash, fetch, initialFetch, source, state]",{"range":"210","text":"211"},"Update the dependencies array to be: [loginIdentifier, store]",{"range":"212","text":"213"},{"range":"214","text":"213"},"Update the dependencies array to be: [callback]",{"range":"215","text":"216"},"Update the dependencies array to be: [goalSelected, goals, selectedList]",{"range":"217","text":"218"},"Update the dependencies array to be: [blankList, lists, selectedList]",{"range":"219","text":"220"},[3201,3211],"[theGoals, token, updateGoals]",[4443,4459],"[enterKeyIsDown, handleNewGoalCreation, newTask]",[4502,4550],"[initialFetchDone, selectedList, retrievedGoals, goals, token]",[4763,4779],"[retrievedLists, token]",[1322,1334],"[configHash, fetch, initialFetch, source, state]",[1306,1308],"[loginIdentifier, store]",[1306,1308],[488,490],"[callback]",[3615,3629],"[goalSelected, goals, selectedList]",[1751,1765],"[blankList, lists, selectedList]"]