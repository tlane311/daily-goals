[{"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\index.js":"1","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\dummy-data.js":"2","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\task\\task.js":"3","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\sticky\\Sticky.js":"4","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\app.js":"5","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\stickies-bar\\StickiesBar.js":"6","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\details-bar\\DetailsBar.js":"7","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\hooks\\useAPI.js":"8","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\login\\Login.js":"9","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\hooks\\useLocalStorage.js":"10","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\register\\Register.js":"11","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\pages\\MainPage.js":"12","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\pages\\LoginPage.js":"13","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\pages\\RegisterPage.js":"14","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\login\\login.js":"15","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\services\\listManagement.js":"16","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\services\\goalManagement.js":"17"},{"size":133,"mtime":1615407378066,"results":"18","hashOfConfig":"19"},{"size":578,"mtime":1614370485921,"results":"20","hashOfConfig":"19"},{"size":1219,"mtime":1615494777304,"results":"21","hashOfConfig":"19"},{"size":1387,"mtime":1616709551133,"results":"22","hashOfConfig":"19"},{"size":4846,"mtime":1616708066522,"results":"23","hashOfConfig":"19"},{"size":960,"mtime":1616708624893,"results":"24","hashOfConfig":"19"},{"size":2184,"mtime":1615499384892,"results":"25","hashOfConfig":"19"},{"size":2143,"mtime":1616615550478,"results":"26","hashOfConfig":"19"},{"size":3430,"mtime":1616607116628,"results":"27","hashOfConfig":"19"},{"size":375,"mtime":1616605752832,"results":"28","hashOfConfig":"19"},{"size":3105,"mtime":1616612438520,"results":"29","hashOfConfig":"19"},{"size":2646,"mtime":1616709463239,"results":"30","hashOfConfig":"19"},{"size":703,"mtime":1616614926257,"results":"31","hashOfConfig":"19"},{"size":702,"mtime":1616614975515,"results":"32","hashOfConfig":"19"},{"size":3430,"mtime":1616607116628,"results":"33","hashOfConfig":"19"},{"size":1380,"mtime":1616706760059,"results":"34","hashOfConfig":"19"},{"size":1568,"mtime":1616710145517,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1heis9t",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"41"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\index.js",[],["78","79"],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\dummy-data.js",[],["80","81"],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\task\\task.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\sticky\\Sticky.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\app.js",["82","83"],"import React, {useEffect, useState} from 'react';\r\n\r\nimport MainPage from './pages/MainPage.js';\r\nimport LoginPage from './pages/LoginPage.js';\r\nimport RegisterPage from './pages/RegisterPage.js';\r\n\r\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\r\n\r\nimport axios from 'axios';\r\n\r\nconst getUserRoute = '/api/me';\r\nconst getListsRoute = '/api/lists/me';\r\nconst getGoalsRoute = '/api/goals/me';\r\n\r\n\r\nexport default function App(){\r\n    /*\r\n        When one logs in, the token will be stored in this component\r\n        Then, main page can use the token to get user data\r\n    */\r\n   // Note, use local storage for token\r\n    const [token, setToken] = useState(\"\");\r\n\r\n    const updateToken = (token) => {\r\n        setToken(token);\r\n    }\r\n    const [dataRetrieved, setDataRetrieved] = useState(false);\r\n    //might have to force reload once data is retrieved\r\n\r\n    const [username, setUsername] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [lists, setLists] = useState([]); // An array of objects each of which represents a list. Shape: {listId, listName, orderNumber}\r\n    const [selectedList, setSelectedList] = useState(0); // This should be the list id number\r\n    const [goals, setGoals] = useState([]); // An array of object each of which represents a goal. Shape: {goalId, listId, goal, orderNumber, deadline, status, note, color}\r\n\r\n\r\n    useEffect( () => {\r\n        // Whenever the token updates, we want to do a get request to grab user data\r\n        if(token && !dataRetrieved){\r\n            grabUserData({\r\n                token, \r\n                setUsername, \r\n                setEmail,\r\n                setSelectedList, \r\n                setLists,\r\n                setGoals,\r\n                setDataRetrieved\r\n            });\r\n        }\r\n    }, [token, dataRetrieved])\r\n\r\n    const updateApp = () => {\r\n        setDataRetrieved(false);\r\n    }\r\n\r\n\r\n    return(\r\n        <>\r\n            <Router>\r\n                <Switch>\r\n                    <Route exact path=\"/\">\r\n                        {dataRetrieved \r\n                            ? <MainPage\r\n                                    token={token} \r\n                                    lists={lists}\r\n                                    selectedList={selectedList}\r\n                                    goals={goals}\r\n                                    updateApp={updateApp}\r\n                                />\r\n                            : <div>loading</div>}\r\n                    </Route>\r\n                    <Route exact path=\"/login\">\r\n                        <LoginPage updateToken={updateToken}/>\r\n                    </Route>\r\n                    <Route exact path=\"/register\">\r\n                        <RegisterPage updateToken={updateToken}/>\r\n                    </Route>\r\n                </Switch>\r\n            </Router>\r\n\r\n\r\n\r\n        </>\r\n\r\n    )\r\n}\r\n\r\n\r\n/*\r\n    This function takes in a token and returns the user's data.\r\n    The expected shape is:\r\n        [\r\n            userData = {username, email},\r\n            listData = [{list_id, list_name, order_number}, {...}, ..., {...}],\r\n            goalsData = [[goalData1, goalData2, ....], [...], ..., [...]]\r\n        ]\r\n    Note, listData.length === goalsData.length and the order is the same.\r\n*/\r\n\r\nasync function grabUserData({token, setUsername, setEmail, setSelectedList, setLists, setGoals, setDataRetrieved}){\r\n    let userData;\r\n    let listData;\r\n    let goalsData=[];\r\n    \r\n    const getUserConfig = {\r\n        method: 'get',\r\n        url: getUserRoute,\r\n        headers: {\r\n            'x-access-token': token,\r\n        }\r\n    }\r\n    const getListsConfig = {\r\n        method: 'get',\r\n        url: getListsRoute,\r\n        headers: {\r\n            'x-access-token': token\r\n        }\r\n    }\r\n    \r\n    await axios(getUserConfig)\r\n        .then( res => {\r\n            return userData = res.data.results;\r\n        });\r\n    setUsername(userData.username);   \r\n    setEmail(userData.email);\r\n    setSelectedList( userData['selected_list'] ); \r\n    await axios(getListsConfig)\r\n        .then( res => {\r\n            return listData = res.data.results;\r\n        });\r\n    setLists(listData);\r\n\r\n    // We are going to iterate through listsData to get the users goals\r\n    // Note, since we want to do some async stuff, we will use an actual for loop instead of Array.prototype.map\r\n    \r\n    for (let i =0; i < listData.length; i++){\r\n        const config={\r\n            method: 'get',\r\n            url: getGoalsRoute,\r\n            params: { listId: listData[i]['list_id']},\r\n            headers: {\r\n                'x-access-token': token,\r\n            }\r\n        }\r\n    \r\n        await axios(config)\r\n            .then( res => {\r\n                goalsData.push(res.data.results);\r\n            });\r\n    }\r\n\r\n    setGoals(goalsData);\r\n    setDataRetrieved(true);\r\n}","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\stickies-bar\\StickiesBar.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\details-bar\\DetailsBar.js",["84"],"import \"../../component-styles/details-bar.css\";\r\nimport {useState} from 'react';\r\n\r\n//all props passed from App\r\n//goal is just the text for the goal\r\n//deadline (usually not going to appear)\r\n//note is extra text to go with the goal\r\n//highlight is just the highlighter color\r\n//handleUpdate will update the state in app which will update the db thru the API\r\n\r\nexport default function DetailsBar({goal, deadline, note, highlight, handleUpdate, visibility}){\r\n    // have to create state for each of the four options\r\n    // have to create state to show when each of the boxes is selected\r\n    // have to set up routine for when to handleUpdate\r\n\r\n    return (\r\n        <div\r\n            id=\"details-bar\" \r\n            className={\r\n                visibility\r\n                    ? \"component-shown\"\r\n                    : \"component-hidden\"\r\n            }\r\n        >\r\n            <div className=\"detail\" id=\"goal-box\"> <GoalBox goal={goal}/> </div>\r\n            <div className=\"detail\"> <DeadlineBox deadline={deadline}/> </div>\r\n            <div className=\"detail\" id=\"note-box\"> <NoteBox note={note}/> </div>\r\n            <div className=\"detail\"> <HighlightBox highlight={highlight}/> </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nfunction GoalBox({goal}){\r\n    return (\r\n        <>  \r\n            <label>\r\n                <input type=\"checkbox\" />\r\n                <span\r\n                    className=\"status-box\">\r\n                </span>\r\n                <input type=\"text\" placeholder={goal}/>\r\n            </label>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nfunction DeadlineBox({deadline}){\r\n    return (<>\r\n        <label>Deadline</label>\r\n        <input type=\"datetime-local\" value={deadline}/>\r\n    </>)\r\n}\r\n\r\nfunction NoteBox({note}){\r\n    return(\r\n        <>\r\n            <label>Note</label>\r\n            <textarea value={note} placeholder=\"Leave a note for your task\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nfunction HighlightBox({highlight}){\r\n    return(\r\n        <>  <label> Highlight Color</label>\r\n            <select>\r\n                <option> Red </option>  \r\n                <option> Green </option>  \r\n                <option> Orange </option>  \r\n            </select>\r\n        </>\r\n    )\r\n}","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\hooks\\useAPI.js",["85"],"import {useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\nimport hash from 'hash-object';\r\nconst CancelToken = axios.CancelToken;\r\n\r\n\r\n//this hook will allow us so streamline interacting with a rest api\r\n\r\n/*\r\nreturns\r\n    result, response, error, isLoading, fetch\r\n*/\r\n\r\nexport default function useAPI(config, initialFetch=true){\r\n    const [state, updateState] = useState({\r\n        response: undefined,\r\n        error: undefined,\r\n        isLoading: true\r\n    })\r\n\r\n    const configHash = hash(config);\r\n\r\n    const source = CancelToken.source();\r\n\r\n    function fetch(){\r\n        axios({\r\n            ...config, \r\n            cancelToken: source.token,\r\n            })\r\n        .then( res => {\r\n            updateState({ error: undefined, response: res, isLoading: false});\r\n        })\r\n        .catch( err => {\r\n            if (axios.isCancel(err)){\r\n                console.log('Request canceled by cleanup: ', err.message);\r\n            } else {\r\n                updateState({error: err, response: undefined, isLoading: false});\r\n            }\r\n        });\r\n    }\r\n\r\n    useEffect( () => {\r\n        updateState({...state, isLoading: true});\r\n\r\n        if (initialFetch){\r\n            fetch();\r\n        }\r\n\r\n        return () => {\r\n            source.cancel('useEffect cleanup.');\r\n        }\r\n\r\n    }, [configHash]);\r\n\r\n    const { response, error, isLoading} = state;\r\n\r\n    const data = response ? response.data : undefined;\r\n    return { data, response, error, isLoading, fetch };\r\n}\r\n\r\n/*\r\n\r\n    const config = {\r\n        \"method\":\"post\",\r\n        \"url\":\"api/login\",\r\n        \"headers\":{\r\n        \"Content-Type\":\"application/json\",\r\n        \"useQueryString\":true,\r\n        'rejectUnauthorized': false,\r\n        },\r\n        data: {\r\n            'username': 'tlane',\r\n            'password': 'some_password'\r\n        }\r\n    }\r\n    \r\n\r\n\r\n\r\n    const getData = async () => {\r\n        try{\r\n            return await axios(config)\r\n            .then( (res) => {\r\n                console.log('response',res);\r\n            })\r\n        } catch (e) {\r\n            console.log('error', e)\r\n        }\r\n    }\r\n\r\n    getData();\r\n\r\n*/","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\login\\Login.js",["86","87"],"import {useEffect, useState} from 'react';\r\nimport useLocalStorage from '../../hooks/useLocalStorage.js'\r\nimport FormData from 'form-data';\r\nimport axios from 'axios';\r\n\r\n\r\n// login route is the url for the post request\r\n// loginIdentifier is a string e.g. email or username\r\n// next is a callback that takes in the response object and tells axios what to do next\r\n// handleError is a callback that tkes in the error object and tells axios what to do next\r\nexport default function Login({loginRoute, loginIdentifier, next, handleError}){\r\n\r\n    // We use local storage for the \"Remember Me\" feature.\r\n    const [store, addItem, removeItem, clearStore] = useLocalStorage();\r\n\r\n\r\n    \r\n    // We need state for the login credentials so that we may pass that info into our custom form-submission handler.\r\n    const [loginName, setLoginName] = useState(\"\");\r\n    const [loginPassword, setLoginPassword] = useState(\"\");\r\n    const [rememberMe, setRememberMe] = useState(false);\r\n\r\n\r\n    // When this component first loads, it will check to see if localStorage has stored login info.\r\n    // If so, useEffect will automatically update the state.\r\n    useEffect( ()=> {\r\n        if (store[loginIdentifier]){\r\n            setRememberMe(true);\r\n            setLoginName(store[loginIdentifier]);\r\n        }\r\n    }, []);\r\n\r\n    const handleRememberMe = e => {\r\n        return setRememberMe(e.target.checked);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n\r\n        e.preventDefault(); // This stops the browser from handling the form on its own.\r\n\r\n        // Add loginName to localStorage if \"Remember Me\" box is checked.\r\n        if (rememberMe) {\r\n            addItem(loginIdentifier, loginName);\r\n        } else { // Otherwise, clear local storage.\r\n            clearStore();\r\n        }\r\n\r\n        const form = new FormData();\r\n        form.append(loginIdentifier, loginName);\r\n        form.append('password', loginPassword);\r\n\r\n        //reseting the password\r\n        setLoginPassword(\"\");\r\n        const config = {\r\n            method: 'post',\r\n            url: loginRoute,\r\n            data: form,\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data',\r\n            }\r\n        }\r\n\r\n        try {\r\n        axios(config)\r\n            .then( next )\r\n        } catch (e) {\r\n            handleError(e);\r\n        }\r\n    }\r\n\r\n    \r\n  \r\n  \r\n    return (\r\n        <form id=\"login\" onSubmit={handleSubmit}>\r\n            <label for={loginIdentifier}></label>\r\n            <input \r\n                type=\"text\"\r\n                value={loginName}\r\n                required \r\n                placeholder={loginIdentifier} \r\n                name={loginIdentifier} \r\n                onChange={ e => {return setLoginName(e.target.value)} }\r\n            />\r\n\r\n            <label for=\"password\"></label>\r\n            <input \r\n                type=\"password\" \r\n                value={loginPassword} \r\n                required \r\n                placeholder=\"password\" \r\n                name=\"password\" \r\n                onChange={ e => {return setLoginPassword(e.target.value)} }\r\n            />\r\n\r\n            <label for=\"remember-me\"> Remember Me </label>\r\n            <input \r\n                type=\"checkbox\" \r\n                name=\"remember-me\" \r\n                onChange={handleRememberMe}\r\n                checked={rememberMe}\r\n            />\r\n\r\n            <button type=\"submit\"> Login </button>\r\n        </form>\r\n    );\r\n}",["88","89"],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\hooks\\useLocalStorage.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\register\\Register.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\pages\\MainPage.js",["90","91","92"],"import React, {useState} from 'react';\r\n\r\n\r\nimport Sticky from '../sticky/Sticky.js';\r\nimport StickiesBar from '../stickies-bar/StickiesBar.js';\r\nimport DetailsBar from '../details-bar/DetailsBar.js';\r\n\r\n\r\n\r\n\r\n/*\r\n    MainPage holds the current sticky, the details-bar and the stickies-bar.\r\n\r\n    MainPage will receieve lists, selectedList and goals from App.\r\n\r\n    MainPage serves to pass on the info to its children.\r\n\r\n    updateApp will force the main app fetch data again. We call this when we make changes to db.\r\n*/\r\n\r\n\r\nexport default function MainPage({token, lists, selectedList, goals, updateApp}){\r\n    \r\n\r\n    /*\r\n    Our data will be stored in a db. Ideally, we would like to query the database as few times as possible. If we query once, we will pull an array of columns. When we update these columns, react doesn't rerender; react fails to rerender because of the deeper shape of the array of columns. We introduce an artificial forceUpdate function to force rerenders.\r\n    */\r\n\r\n    const [, updateState] = React.useState();\r\n    const forceUpdate = React.useCallback(() => updateState({}), []);\r\n\r\n    const currentSelection = lists.length  //currentSelection if defined is a listId\r\n        ? selectedList || lists[0]['list_id']\r\n        : selectedList;\r\n    const currentList = lists.length\r\n        ? lists.find( list => list['list_id'] === currentSelection )\r\n        : { 'list_name': 'New List', 'order_number': 1}\r\n\r\n    const [currentSticky, setCurrentSticky] = useState(currentList);\r\n\r\n    const listIndex = lists.length \r\n        ? lists.findIndex(list => list['list_id'] === currentSelection )\r\n        : 0;\r\n    const goalsForCurrentSticky = currentSelection\r\n    ? goals[listIndex]\r\n    : [];\r\n\r\n    const [currentGoals, setCurrentGoals] = useState(goalsForCurrentSticky);\r\n    \r\n    return(\r\n        <>\r\n            <StickiesBar\r\n                token={token}\r\n                lists={lists}\r\n                selectedList={selectedList}\r\n                visibility={1}\r\n                updateApp={updateApp} \r\n            />\r\n                       \r\n            <Sticky\r\n                token={token}\r\n                theList={currentSticky}\r\n                theGoals={currentGoals}\r\n            />\r\n             {/*\r\n             <input type=\"text\" value={newStickyName} onChange={ e => {\r\n                setNewStickyName(e.target.value);\r\n            }}/>\r\n            [\"Today\", \"Important\", \"Goals\", \"Chores\"]\r\n            <button onClick={handleCreateNewSticky}> Create New Column </button>\r\n            */}\r\n            <DetailsBar goal={'test'} goals={goals} visibility={1}/>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\pages\\LoginPage.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\pages\\RegisterPage.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\login\\login.js",["93","94"],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\services\\listManagement.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\services\\goalManagement.js",[],{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"95","replacedBy":"99"},{"ruleId":"97","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":30,"column":12,"nodeType":"103","messageId":"104","endLine":30,"endColumn":20},{"ruleId":"101","severity":1,"message":"105","line":31,"column":12,"nodeType":"103","messageId":"104","endLine":31,"endColumn":17},{"ruleId":"101","severity":1,"message":"106","line":2,"column":9,"nodeType":"103","messageId":"104","endLine":2,"endColumn":17},{"ruleId":"107","severity":1,"message":"108","line":53,"column":8,"nodeType":"109","endLine":53,"endColumn":20,"suggestions":"110"},{"ruleId":"101","severity":1,"message":"111","line":14,"column":28,"nodeType":"103","messageId":"104","endLine":14,"endColumn":38},{"ruleId":"107","severity":1,"message":"112","line":31,"column":8,"nodeType":"109","endLine":31,"endColumn":10,"suggestions":"113"},{"ruleId":"95","replacedBy":"114"},{"ruleId":"97","replacedBy":"115"},{"ruleId":"101","severity":1,"message":"116","line":30,"column":11,"nodeType":"103","messageId":"104","endLine":30,"endColumn":22},{"ruleId":"101","severity":1,"message":"117","line":39,"column":27,"nodeType":"103","messageId":"104","endLine":39,"endColumn":43},{"ruleId":"101","severity":1,"message":"118","line":48,"column":26,"nodeType":"103","messageId":"104","endLine":48,"endColumn":41},{"ruleId":"101","severity":1,"message":"111","line":14,"column":28,"nodeType":"103","messageId":"104","endLine":14,"endColumn":38},{"ruleId":"107","severity":1,"message":"112","line":31,"column":8,"nodeType":"109","endLine":31,"endColumn":10,"suggestions":"119"},"no-native-reassign",["120"],"no-negated-in-lhs",["121"],["120"],["121"],"no-unused-vars","'username' is assigned a value but never used.","Identifier","unusedVar","'email' is assigned a value but never used.","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetch', 'initialFetch', 'source', and 'state'. Either include them or remove the dependency array. You can also do a functional update 'updateState(s => ...)' if you only need 'state' in the 'updateState' call.","ArrayExpression",["122"],"'removeItem' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'loginIdentifier' and 'store'. Either include them or remove the dependency array. If 'setLoginName' needs the current value of 'loginIdentifier', you can also switch to useReducer instead of useState and read 'loginIdentifier' in the reducer.",["123"],["120"],["121"],"'forceUpdate' is assigned a value but never used.","'setCurrentSticky' is assigned a value but never used.","'setCurrentGoals' is assigned a value but never used.",["124"],"no-global-assign","no-unsafe-negation",{"desc":"125","fix":"126"},{"desc":"127","fix":"128"},{"desc":"127","fix":"129"},"Update the dependencies array to be: [configHash, fetch, initialFetch, source, state]",{"range":"130","text":"131"},"Update the dependencies array to be: [loginIdentifier, store]",{"range":"132","text":"133"},{"range":"134","text":"133"},[1322,1334],"[configHash, fetch, initialFetch, source, state]",[1306,1308],"[loginIdentifier, store]",[1306,1308]]