[{"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\index.js":"1","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\dummy-data.js":"2","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\task\\task.js":"3","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\sticky\\Sticky.js":"4","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\app.js":"5","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\stickies-bar\\StickiesBar.js":"6","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\details-bar\\DetailsBar.js":"7","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\hooks\\useAPI.js":"8","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\login\\Login.js":"9","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\hooks\\useLocalStorage.js":"10","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\register\\Register.js":"11","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\pages\\MainPage.js":"12","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\pages\\LoginPage.js":"13","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\pages\\RegisterPage.js":"14","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\login\\login.js":"15","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\services\\listManagement.js":"16","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\services\\goalManagement.js":"17","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\hooks\\useKeyDown.js":"18","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\services\\userManagement.js":"19","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\task\\OrderButtons.js":"20"},{"size":133,"mtime":1615407378066,"results":"21","hashOfConfig":"22"},{"size":578,"mtime":1614370485921,"results":"23","hashOfConfig":"22"},{"size":2109,"mtime":1617049272721,"results":"24","hashOfConfig":"22"},{"size":7658,"mtime":1617121751566,"results":"25","hashOfConfig":"22"},{"size":4764,"mtime":1617053938017,"results":"26","hashOfConfig":"22"},{"size":2430,"mtime":1617125575879,"results":"27","hashOfConfig":"22"},{"size":4286,"mtime":1616790924936,"results":"28","hashOfConfig":"22"},{"size":2143,"mtime":1616615550478,"results":"29","hashOfConfig":"22"},{"size":3430,"mtime":1616607116628,"results":"30","hashOfConfig":"22"},{"size":375,"mtime":1616605752832,"results":"31","hashOfConfig":"22"},{"size":3105,"mtime":1616612438520,"results":"32","hashOfConfig":"22"},{"size":2991,"mtime":1617063453352,"results":"33","hashOfConfig":"22"},{"size":703,"mtime":1616614926257,"results":"34","hashOfConfig":"22"},{"size":702,"mtime":1616614975515,"results":"35","hashOfConfig":"22"},{"size":3430,"mtime":1616607116628,"results":"36","hashOfConfig":"22"},{"size":1380,"mtime":1616706760059,"results":"37","hashOfConfig":"22"},{"size":1889,"mtime":1617037433929,"results":"38","hashOfConfig":"22"},{"size":521,"mtime":1616781887140,"results":"39","hashOfConfig":"22"},{"size":1450,"mtime":1617035094777,"results":"40","hashOfConfig":"22"},{"size":319,"mtime":1617119333608,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1heis9t",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"44"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"47"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"44"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"44"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"44"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\index.js",[],["92","93"],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\dummy-data.js",[],["94","95"],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\task\\task.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\sticky\\Sticky.js",["96","97"],"import {useState, useEffect} from 'react';\r\nimport '../../component-styles/sticky.css';\r\n\r\nimport Task from '../task/task.js';\r\n\r\nimport goalManagement from '../../services/goalManagement.js';\r\nimport listManagement from '../../services/listManagement.js';\r\nimport userManagement from '../../services/userManagement.js';\r\n\r\nimport useKeyDown from '../../hooks/useKeyDown.js';\r\n\r\n\r\nexport default function Sticky({theList, theGoals, token, setGoalSelected, updateApp}){\r\n    \r\n    const enterKeyIsDown = useKeyDown('Enter'); // We would like for the user to be able create a new goal using \"Enter\" key\r\n\r\n    const [goals, setGoals] = useState(theGoals);\r\n\r\n    // if the goals aren't sorted, handle sorting\r\n    useEffect( () => {\r\n        // Note, we define an async function and then call it to make sure our db updates happen in a given order\r\n        // If we modify this in the future, take this note into consideration.\r\n\r\n        const asyncEffect = async () => {\r\n            // If order numbers are inconsistent, we will update db and the rerender app.\r\n            // If order numbers are consistent, we will sort theGoals and store as state.\r\n\r\n            \r\n            // containsRepeats returns a boolean representing if the arr contains repeats\r\n            const sortingNeeded = containsRepeats(theGoals.map(goal => goal['order_number']));\r\n\r\n            if (sortingNeeded) {\r\n                for (let i=0; i < theGoals.length; i++){                \r\n                    await goalManagement.update( token,\r\n                        theGoals[i]['goal_id'], //goalId\r\n                        theGoals[i]['goal'], //goal\r\n                        i, //orderNumber.\r\n                        theGoals[i]['deadline'], //deadline\r\n                        theGoals[i]['status'], //status\r\n                        theGoals[i]['note'], //note\r\n                        theGoals[i]['color'], //color\r\n                    )\r\n                }\r\n                return await updateApp();\r\n            }\r\n\r\n            const sorted = [...theGoals].sort( (a,b) => a['order_number'] - b['order_number']);\r\n            setGoals(sorted);\r\n        }\r\n\r\n        asyncEffect();\r\n\r\n    }, [theGoals])\r\n\r\n    const [newTask, setNewTask] = useState(\"\");\r\n    const [renameList, setRenameList] = useState(false)\r\n    const [newListName, setNewListName] = useState(\"\");\r\n\r\n    const handleNewGoalCreation = async e => {\r\n        await goalManagement.create(token, theList['list_id'], newTask, theGoals.length+1);\r\n        setNewTask(\"\");\r\n        return await updateApp();\r\n    }\r\n\r\n    const handleListUpdate = async e => {\r\n        setRenameList(false);\r\n        await listManagement.update(token, 'list_name', newListName, theList['list_id']);\r\n        setNewListName(\"\");\r\n        return await updateApp();\r\n    }\r\n\r\n    const handleListDeletion = async e => {\r\n        if (theGoals.length){\r\n            const idsArray = theGoals.map(goal => goal['goal_id']);\r\n            await goalManagement.deleteMany(token, idsArray);\r\n        }\r\n        await listManagement.delete(token, theList['list_id']);\r\n        await userManagement.update(token, 'selected_list', null);\r\n        return await updateApp();\r\n    }\r\n\r\n    useEffect( () => { // Note, we had some trouble using onKeyDown, so we make use of useEffect to handle the keydown \"event\".\r\n        if (enterKeyIsDown && newTask)\r\n        {\r\n            handleNewGoalCreation();\r\n        }\r\n    }, [enterKeyIsDown])\r\n\r\n    const handleIncreasePriority = (id) => {\r\n        // Here, we will update the priority in the db and then update the app\r\n\r\n        const targetIndex = goals.findIndex( goal => goal['goal_id'] === id);\r\n\r\n        // If target is the first element of the array OR for some reason the id is not found\r\n        if (targetIndex<=0) return;\r\n\r\n        // Otherwise,\r\n        \r\n        const targetGoal = goals[targetIndex];\r\n        const previousGoal = goals[targetIndex - 1]; // Note, if the function reaches here, targetIndex - 1 >= 0\r\n\r\n        goalManagement.update(token,\r\n            targetGoal['goal_id'],\r\n            targetGoal['goal'],\r\n            targetIndex - 1,\r\n            targetGoal['deadline'],\r\n            targetGoal['status'],\r\n            targetGoal['note'],\r\n            targetGoal['color']\r\n        );\r\n        goalManagement.update(token,\r\n            previousGoal['goal_id'],\r\n            previousGoal['goal'],\r\n            targetIndex,\r\n            previousGoal['deadline'],\r\n            previousGoal['status'],\r\n            previousGoal['note'],\r\n            previousGoal['color']\r\n        );\r\n\r\n        updateApp();\r\n\r\n    }\r\n\r\n    const handleDecreasePriority = (id) => {\r\n        console.log('down')\r\n        // Here, we will update the priority in the db and then update the app\r\n\r\n        const targetIndex = goals.findIndex( goal => goal['goal_id'] === id); \r\n\r\n        // If target is the last element of the array OR for some reason the id is not found\r\n        \r\n        if (targetIndex<0 || targetIndex===goals.length - 1) return;\r\n\r\n        // Otherwise,\r\n        \r\n        const targetGoal = goals[targetIndex];\r\n        const nextGoal = goals[targetIndex + 1]; // Note, if the function reaches here, targetIndex - 1 >= 0\r\n\r\n        goalManagement.update(token,\r\n            targetGoal['goal_id'],\r\n            targetGoal['goal'],\r\n            targetIndex + 1,\r\n            targetGoal['deadline'],\r\n            targetGoal['status'],\r\n            targetGoal['note'],\r\n            targetGoal['color']\r\n        );\r\n        goalManagement.update(token,\r\n            nextGoal['goal_id'],\r\n            nextGoal['goal'],\r\n            targetIndex,\r\n            nextGoal['deadline'],\r\n            nextGoal['status'],\r\n            nextGoal['note'],\r\n            nextGoal['color']\r\n        );\r\n\r\n        updateApp();\r\n    }\r\n\r\n    return (\r\n        <div className=\"sticky\" id=\"sticky\"> {/* why do I have redundant class and id*/}\r\n            <h3 onClick={()=>{ setRenameList(!renameList); }}> {theList['list_name']} </h3>\r\n            { renameList ? <RenameListInput setNewListName={setNewListName} updateList = {handleListUpdate} />: <></>}\r\n            <button onClick={handleListDeletion}> Delete This List </button>\r\n            <ul>\r\n                {goals.map(\r\n                    (goal,index) => \r\n                        <Task \r\n                            token={token}\r\n                            goal={goal}\r\n                            setGoalSelected={setGoalSelected}\r\n                            handleIncreasePriority={handleIncreasePriority}\r\n                            handleDecreasePriority={handleDecreasePriority}\r\n                            updateApp={updateApp}\r\n                        />)}\r\n            </ul>\r\n            <span className=\"new-task\">\r\n                <button onClick={handleNewGoalCreation}>\r\n                    +\r\n                </button> \r\n\r\n                <input type=\"text\" value={newTask} onChange={ e => setNewTask( e.target.value)}/>\r\n            </span>\r\n\r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nfunction RenameListInput({setNewListName, updateList}){\r\n    return (\r\n        <>\r\n            <input type=\"text\" placeholder=\"New List Name\" onChange={ e => { setNewListName(e.target.value); }}/>\r\n            <button onClick={updateList}> Update </button>\r\n        </>\r\n    );\r\n}\r\n\r\n// Helper function for ordering goals/lists\r\nfunction containsRepeats(arr){\r\n    if (!Array.isArray(arr)) return undefined;\r\n    \r\n    let newArr = [];\r\n\r\n    for (let index =0; index < arr.length; index++){\r\n        if ( newArr.includes(arr[index]) ) return true;\r\n        newArr.push(arr[index]);\r\n    }\r\n\r\n    return false;\r\n}","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\app.js",["98","99"],"import React, {useEffect, useState} from 'react';\r\n\r\nimport MainPage from './pages/MainPage.js';\r\nimport LoginPage from './pages/LoginPage.js';\r\nimport RegisterPage from './pages/RegisterPage.js';\r\n\r\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\r\n\r\nimport axios from 'axios';\r\n\r\nconst getUserRoute = '/api/me';\r\nconst getListsRoute = '/api/lists/me';\r\nconst getGoalsRoute = '/api/goals/me';\r\n\r\n\r\nexport default function App(){\r\n    /*\r\n        When one logs in, the token will be stored in this component\r\n        Then, main page can use the token to get user data\r\n    */\r\n   // Note, use local storage for token\r\n    const [token, setToken] = useState(\"\");\r\n\r\n    const updateToken = (token) => {\r\n        setToken(token);\r\n    }\r\n    const [dataRetrieved, setDataRetrieved] = useState(false);\r\n    //might have to force reload once data is retrieved\r\n\r\n    const [username, setUsername] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [lists, setLists] = useState([]); // An array of objects each of which represents a list. Shape: {listId, listName, orderNumber}\r\n    const [selectedList, setSelectedList] = useState(0); // This should be the list id number\r\n    const [goals, setGoals] = useState([]); // An array of object each of which represents a goal. Shape: {goalId, listId, goal, orderNumber, deadline, status, note, color}\r\n\r\n\r\n    useEffect( () => {\r\n        // Whenever the token updates, we want to do a get request to grab user data\r\n        if (token && !dataRetrieved){\r\n            grabUserData({\r\n                token, \r\n                setUsername, \r\n                setEmail,\r\n                setSelectedList, \r\n                setLists,\r\n                setGoals,\r\n                setDataRetrieved\r\n            });\r\n        }\r\n    }, [token, dataRetrieved])\r\n\r\n    const updateApp = () => {\r\n        setDataRetrieved(false);\r\n    }\r\n\r\n\r\n    return(\r\n        <>\r\n            <Router>\r\n                <Switch>\r\n                    <Route exact path=\"/\">\r\n                        <MainPage\r\n                            token={token} \r\n                            lists={lists}\r\n                            selectedList={selectedList}\r\n                            setSelectedList={setSelectedList}\r\n                            goals={goals}\r\n                            updateApp={updateApp}\r\n                        />\r\n                    </Route>\r\n                    <Route exact path=\"/login\">\r\n                        <LoginPage updateToken={updateToken}/>\r\n                    </Route>\r\n                    <Route exact path=\"/register\">\r\n                        <RegisterPage updateToken={updateToken}/>\r\n                    </Route>\r\n                </Switch>\r\n            </Router>\r\n\r\n\r\n\r\n        </>\r\n\r\n    )\r\n}\r\n\r\n\r\n/*\r\n    This function takes in a token and returns the user's data.\r\n    The expected shape is:\r\n        [\r\n            userData = {username, email},\r\n            listData = [{list_id, list_name, order_number}, {...}, ..., {...}],\r\n            goalsData = [[goalData1, goalData2, ....], [...], ..., [...]]\r\n        ]\r\n    Note, listData.length === goalsData.length and the order is the same.\r\n*/\r\n\r\nasync function grabUserData({token, setUsername, setEmail, setSelectedList, setLists, setGoals, setDataRetrieved}){\r\n    let userData;\r\n    let listData;\r\n    let goalsData=[];\r\n    \r\n    const getUserConfig = {\r\n        method: 'get',\r\n        url: getUserRoute,\r\n        headers: {\r\n            'x-access-token': token,\r\n        }\r\n    }\r\n    const getListsConfig = {\r\n        method: 'get',\r\n        url: getListsRoute,\r\n        headers: {\r\n            'x-access-token': token\r\n        }\r\n    }\r\n    \r\n    await axios(getUserConfig)\r\n        .then( res => {\r\n            return userData = res.data.results;\r\n        });\r\n    setUsername(userData.username);   \r\n    setEmail(userData.email);\r\n    setSelectedList( userData['selected_list'] ); \r\n    await axios(getListsConfig)\r\n        .then( res => {\r\n            return listData = res.data.results;\r\n        });\r\n    setLists(listData);\r\n\r\n    // We are going to iterate through listsData to get the users goals\r\n    // Note, since we want to do some async stuff, we will use an actual for loop instead of Array.prototype.map\r\n    \r\n    for (let i =0; i < listData.length; i++){\r\n        const config={\r\n            method: 'get',\r\n            url: getGoalsRoute,\r\n            params: { listId: listData[i]['list_id']},\r\n            headers: {\r\n                'x-access-token': token,\r\n            }\r\n        }\r\n    \r\n        await axios(config)\r\n            .then( res => {\r\n                goalsData.push(res.data.results);\r\n            });\r\n    }\r\n\r\n    setGoals(goalsData);\r\n    setDataRetrieved(true);\r\n}","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\stickies-bar\\StickiesBar.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\details-bar\\DetailsBar.js",["100","101","102"],"import \"../../component-styles/details-bar.css\";\r\nimport {useEffect, useState} from 'react';\r\nimport goalManagement from '../../services/goalManagement.js';\r\n\r\n\r\n\r\n// The shape of goals is [ [goal0, goal1, goal2, ... , goaln], [...], ... [...]]\r\n// where each subarray corresponds to a given list\r\n// Note, we are not implementing deadlines here because not all browsers support that input type.\r\n// We will implement that when we find a work around.\r\n\r\n\r\nexport default function DetailsBar({token, goals, goalSelected, setGoalSelected, updateApp}){\r\n    // have to set up routine for when to handleUpdate\r\n    const [visibility, setVisibility] = useState(false);\r\n\r\n    const blankGoal = { //blank goal in case no goal is selected\r\n        'goal_id': \"\",\r\n        'status': false,\r\n        'goal': \"\",\r\n        'deadline': '',\r\n        'note': '',\r\n        'color': ''\r\n    }\r\n    const [theGoal, setTheGoal] = useState(goals.flat().find( goal => goal['goal_id']===goalSelected) || blankGoal);\r\n\r\n    const [updateStatus, setUpdateStatus] = useState(theGoal.status ? 1 : 0)\r\n    const [updateGoal, setUpdateGoal] = useState(theGoal.goal)\r\n    const [updateNote, setUpdateNote] = useState(theGoal.note)\r\n    const [updateColor, setUpdateColor] = useState(theGoal.color)\r\n\r\n\r\n    useEffect( () => {\r\n        setTheGoal(goals.flat().find( goal => goal['goal_id']===goalSelected) || blankGoal);\r\n        setVisibility(Boolean(goalSelected))\r\n    }, [goalSelected])\r\n\r\n    useEffect( () => {\r\n        setUpdateStatus(theGoal.status ? 1 : 0)\r\n        setUpdateGoal(theGoal.goal)\r\n        setUpdateNote(theGoal.note)\r\n    }, [theGoal])\r\n\r\n    const handleSubmission = e => {\r\n        if (goalSelected) {\r\n            goalManagement.update(token, \r\n                theGoal['goal_id'], \r\n                updateGoal, \r\n                theGoal.orderNumber, \r\n                theGoal.deadline, \r\n                updateStatus, \r\n                updateNote, \r\n                updateColor);\r\n            return updateApp();\r\n        }\r\n    }\r\n\r\n    const handleHide = e => {\r\n        setGoalSelected(false);\r\n    }\r\n\r\n\r\n    return (\r\n        <div\r\n            id=\"details-bar\" \r\n            className={\r\n                visibility\r\n                    ? \"component-shown\"\r\n                    : \"component-hidden\"\r\n            }\r\n        >\r\n            <div className=\"detail\" id=\"goal-box\"> \r\n                <GoalBox\r\n                    goal={updateGoal}\r\n                    status={updateStatus}\r\n                    updateGoal={setUpdateGoal}\r\n                    updateStatus={setUpdateStatus}\r\n                /> \r\n            </div>\r\n            {/*<div className=\"detail\"> <DeadlineBox deadline={theGoal.deadline.slice(1,theGoal.deadline.length-1)}/> </div>*/}\r\n            <div className=\"detail\" id=\"note-box\"> <NoteBox note={theGoal.note} updateNote={setUpdateNote}/> </div>\r\n            <div className=\"detail\"> <HighlightBox highlight={theGoal.color}/> </div>\r\n            <button onClick={handleSubmission}> Update </button>\r\n            <button onClick={handleHide}> Hide </button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nfunction GoalBox({goal, status, updateGoal, updateStatus}){\r\n    return (\r\n        <>  \r\n            <label>\r\n                <input type=\"checkbox\" checked={status} onChange={ e => {updateStatus(e.target.checked ? 1 : 0)}} />\r\n                <span\r\n                    className=\"status-box\">\r\n                </span>\r\n                <input type=\"text\" placeholder={goal} onChange={(e) => {updateGoal(e.target.value)}}/>\r\n            </label>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nfunction DeadlineBox({deadline}){\r\n    return (<>\r\n        <label>Deadline</label>\r\n        <input type=\"datetime-local\" placeholder={deadline}/>\r\n    </>)\r\n}\r\n\r\nfunction NoteBox({note, updateNote}){\r\n    return(\r\n        <>\r\n            <label>Note</label>\r\n        <textarea placeholder={note || \"Leave a note for your task\"} onChange={(e) => {updateNote(e.target.value)}}/>\r\n        </>\r\n    )\r\n}\r\n\r\nfunction HighlightBox({highlight}){\r\n    return(\r\n        <>  <label> Highlight Color</label>\r\n            <select>\r\n                <option> Red </option>  \r\n                <option> Green </option>  \r\n                <option> Orange </option>  \r\n            </select>\r\n        </>\r\n    )\r\n}","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\hooks\\useAPI.js",["103"],"import {useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\nimport hash from 'hash-object';\r\nconst CancelToken = axios.CancelToken;\r\n\r\n\r\n//this hook will allow us so streamline interacting with a rest api\r\n\r\n/*\r\nreturns\r\n    result, response, error, isLoading, fetch\r\n*/\r\n\r\nexport default function useAPI(config, initialFetch=true){\r\n    const [state, updateState] = useState({\r\n        response: undefined,\r\n        error: undefined,\r\n        isLoading: true\r\n    })\r\n\r\n    const configHash = hash(config);\r\n\r\n    const source = CancelToken.source();\r\n\r\n    function fetch(){\r\n        axios({\r\n            ...config, \r\n            cancelToken: source.token,\r\n            })\r\n        .then( res => {\r\n            updateState({ error: undefined, response: res, isLoading: false});\r\n        })\r\n        .catch( err => {\r\n            if (axios.isCancel(err)){\r\n                console.log('Request canceled by cleanup: ', err.message);\r\n            } else {\r\n                updateState({error: err, response: undefined, isLoading: false});\r\n            }\r\n        });\r\n    }\r\n\r\n    useEffect( () => {\r\n        updateState({...state, isLoading: true});\r\n\r\n        if (initialFetch){\r\n            fetch();\r\n        }\r\n\r\n        return () => {\r\n            source.cancel('useEffect cleanup.');\r\n        }\r\n\r\n    }, [configHash]);\r\n\r\n    const { response, error, isLoading} = state;\r\n\r\n    const data = response ? response.data : undefined;\r\n    return { data, response, error, isLoading, fetch };\r\n}\r\n\r\n/*\r\n\r\n    const config = {\r\n        \"method\":\"post\",\r\n        \"url\":\"api/login\",\r\n        \"headers\":{\r\n        \"Content-Type\":\"application/json\",\r\n        \"useQueryString\":true,\r\n        'rejectUnauthorized': false,\r\n        },\r\n        data: {\r\n            'username': 'tlane',\r\n            'password': 'some_password'\r\n        }\r\n    }\r\n    \r\n\r\n\r\n\r\n    const getData = async () => {\r\n        try{\r\n            return await axios(config)\r\n            .then( (res) => {\r\n                console.log('response',res);\r\n            })\r\n        } catch (e) {\r\n            console.log('error', e)\r\n        }\r\n    }\r\n\r\n    getData();\r\n\r\n*/","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\login\\Login.js",["104","105"],"import {useEffect, useState} from 'react';\r\nimport useLocalStorage from '../../hooks/useLocalStorage.js'\r\nimport FormData from 'form-data';\r\nimport axios from 'axios';\r\n\r\n\r\n// login route is the url for the post request\r\n// loginIdentifier is a string e.g. email or username\r\n// next is a callback that takes in the response object and tells axios what to do next\r\n// handleError is a callback that tkes in the error object and tells axios what to do next\r\nexport default function Login({loginRoute, loginIdentifier, next, handleError}){\r\n\r\n    // We use local storage for the \"Remember Me\" feature.\r\n    const [store, addItem, removeItem, clearStore] = useLocalStorage();\r\n\r\n\r\n    \r\n    // We need state for the login credentials so that we may pass that info into our custom form-submission handler.\r\n    const [loginName, setLoginName] = useState(\"\");\r\n    const [loginPassword, setLoginPassword] = useState(\"\");\r\n    const [rememberMe, setRememberMe] = useState(false);\r\n\r\n\r\n    // When this component first loads, it will check to see if localStorage has stored login info.\r\n    // If so, useEffect will automatically update the state.\r\n    useEffect( ()=> {\r\n        if (store[loginIdentifier]){\r\n            setRememberMe(true);\r\n            setLoginName(store[loginIdentifier]);\r\n        }\r\n    }, []);\r\n\r\n    const handleRememberMe = e => {\r\n        return setRememberMe(e.target.checked);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n\r\n        e.preventDefault(); // This stops the browser from handling the form on its own.\r\n\r\n        // Add loginName to localStorage if \"Remember Me\" box is checked.\r\n        if (rememberMe) {\r\n            addItem(loginIdentifier, loginName);\r\n        } else { // Otherwise, clear local storage.\r\n            clearStore();\r\n        }\r\n\r\n        const form = new FormData();\r\n        form.append(loginIdentifier, loginName);\r\n        form.append('password', loginPassword);\r\n\r\n        //reseting the password\r\n        setLoginPassword(\"\");\r\n        const config = {\r\n            method: 'post',\r\n            url: loginRoute,\r\n            data: form,\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data',\r\n            }\r\n        }\r\n\r\n        try {\r\n        axios(config)\r\n            .then( next )\r\n        } catch (e) {\r\n            handleError(e);\r\n        }\r\n    }\r\n\r\n    \r\n  \r\n  \r\n    return (\r\n        <form id=\"login\" onSubmit={handleSubmit}>\r\n            <label for={loginIdentifier}></label>\r\n            <input \r\n                type=\"text\"\r\n                value={loginName}\r\n                required \r\n                placeholder={loginIdentifier} \r\n                name={loginIdentifier} \r\n                onChange={ e => {return setLoginName(e.target.value)} }\r\n            />\r\n\r\n            <label for=\"password\"></label>\r\n            <input \r\n                type=\"password\" \r\n                value={loginPassword} \r\n                required \r\n                placeholder=\"password\" \r\n                name=\"password\" \r\n                onChange={ e => {return setLoginPassword(e.target.value)} }\r\n            />\r\n\r\n            <label for=\"remember-me\"> Remember Me </label>\r\n            <input \r\n                type=\"checkbox\" \r\n                name=\"remember-me\" \r\n                onChange={handleRememberMe}\r\n                checked={rememberMe}\r\n            />\r\n\r\n            <button type=\"submit\"> Login </button>\r\n        </form>\r\n    );\r\n}",["106","107"],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\hooks\\useLocalStorage.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\register\\Register.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\pages\\MainPage.js",["108"],"import React, {useState, useEffect} from 'react';\r\n\r\n\r\nimport Sticky from '../sticky/Sticky.js';\r\nimport StickiesBar from '../stickies-bar/StickiesBar.js';\r\nimport DetailsBar from '../details-bar/DetailsBar.js';\r\n\r\n\r\n\r\n\r\n/*\r\n    MainPage holds the current sticky, the details-bar and the stickies-bar.\r\n\r\n    MainPage will receieve lists, selectedList and goals from App.\r\n\r\n    MainPage serves to pass on the info to its children.\r\n\r\n    updateApp will force the main app fetch data again. We call this when we make changes to db.\r\n\r\n    I need to update selectedList to be a local storage thing\r\n*/\r\n\r\n\r\nconst blankList = { 'list_name': 'Create a New List', 'order_number': undefined}\r\n\r\nexport default function MainPage({token, lists, selectedList, setSelectedList, goals, updateApp}){\r\n    \r\n\r\n    /*\r\n    Our data will be stored in a db. Ideally, we would like to query the database as few times as possible. If we query once, we will pull an array of columns. When we update these columns, react doesn't rerender; react fails to rerender because of the deeper shape of the array of columns. We introduce an artificial forceUpdate function to force rerenders.\r\n    */\r\n\r\n    const [, updateState] = React.useState();\r\n    const forceUpdate = React.useCallback(() => updateState({}), []);\r\n\r\n\r\n    // first we flatten\r\n    const [allGoals, setAllGoals] = useState(goals.flat());\r\n\r\n    useEffect( () => {\r\n        setAllGoals(goals.flat());\r\n    }, [goals,lists])\r\n \r\n\r\n    // the current list might be undefined\r\n    const [currentList, setCurrentList] = useState(lists.find(list => list['list_id'] === selectedList) || blankList );\r\n\r\n    useEffect( () => {\r\n        setCurrentList( lists.find(list => list['list_id'] === selectedList )|| blankList);\r\n    }, [selectedList, lists]);\r\n\r\n    const [currentGoals, setCurrentGoals] = useState(allGoals.filter( goal => goal['list_id']===selectedList));\r\n \r\n    useEffect( () => {\r\n        setCurrentGoals(allGoals.filter( goal => goal['list_id']===selectedList));\r\n    }, [selectedList, allGoals, token])\r\n\r\n    const [goalSelected, setGoalSelected] = useState(null);\r\n    \r\n    return(\r\n        <>\r\n            <StickiesBar\r\n                token={token}\r\n                lists={lists}\r\n                selectedList={selectedList}\r\n                setSelectedList={setSelectedList}\r\n                visibility={true}\r\n                updateApp={updateApp}\r\n            />\r\n                       \r\n            <Sticky\r\n                token={token}\r\n                theList={currentList}\r\n                theGoals={currentGoals}\r\n                setGoalSelected={setGoalSelected}\r\n                updateApp={updateApp}\r\n            />\r\n\r\n            <DetailsBar \r\n                token={token}\r\n                goals={goals}\r\n                goalSelected={goalSelected}\r\n                setGoalSelected={setGoalSelected}\r\n                visibility={true}\r\n                updateApp={updateApp}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\pages\\LoginPage.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\pages\\RegisterPage.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\login\\login.js",["109","110"],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\services\\listManagement.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\services\\goalManagement.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\hooks\\useKeyDown.js",["111"],"import {useEffect, useState} from 'react';\r\n\r\n\r\nexport default function useKeyDown(targetKey){\r\n    const [keyDown, setKeyDown] = useState(false);\r\n \r\n    const callback = ({ key }) => {\r\n        if (key === targetKey) {\r\n            setKeyDown(true);\r\n            setTimeout( () => {setKeyDown(false)}, 500); \r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('keydown', callback);\r\n        return () => {window.removeEventListener('keydown', callback)}\r\n    },[]);\r\n    \r\n    return keyDown\r\n}","C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\services\\userManagement.js",[],"C:\\Users\\Thomas\\Desktop\\Coding\\Projects\\Highlighted Projects\\Daily Goals\\daily-goals\\src\\components\\task\\OrderButtons.js",[],{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"112","replacedBy":"116"},{"ruleId":"114","replacedBy":"117"},{"ruleId":"118","severity":1,"message":"119","line":53,"column":8,"nodeType":"120","endLine":53,"endColumn":18,"suggestions":"121"},{"ruleId":"118","severity":1,"message":"122","line":87,"column":8,"nodeType":"120","endLine":87,"endColumn":24,"suggestions":"123"},{"ruleId":"124","severity":1,"message":"125","line":30,"column":12,"nodeType":"126","messageId":"127","endLine":30,"endColumn":20},{"ruleId":"124","severity":1,"message":"128","line":31,"column":12,"nodeType":"126","messageId":"127","endLine":31,"endColumn":17},{"ruleId":"124","severity":1,"message":"129","line":30,"column":25,"nodeType":"126","messageId":"127","endLine":30,"endColumn":39},{"ruleId":"118","severity":1,"message":"130","line":36,"column":8,"nodeType":"120","endLine":36,"endColumn":22,"suggestions":"131"},{"ruleId":"124","severity":1,"message":"132","line":105,"column":10,"nodeType":"126","messageId":"127","endLine":105,"endColumn":21},{"ruleId":"118","severity":1,"message":"133","line":53,"column":8,"nodeType":"120","endLine":53,"endColumn":20,"suggestions":"134"},{"ruleId":"124","severity":1,"message":"135","line":14,"column":28,"nodeType":"126","messageId":"127","endLine":14,"endColumn":38},{"ruleId":"118","severity":1,"message":"136","line":31,"column":8,"nodeType":"120","endLine":31,"endColumn":10,"suggestions":"137"},{"ruleId":"112","replacedBy":"138"},{"ruleId":"114","replacedBy":"139"},{"ruleId":"124","severity":1,"message":"140","line":34,"column":11,"nodeType":"126","messageId":"127","endLine":34,"endColumn":22},{"ruleId":"124","severity":1,"message":"135","line":14,"column":28,"nodeType":"126","messageId":"127","endLine":14,"endColumn":38},{"ruleId":"118","severity":1,"message":"136","line":31,"column":8,"nodeType":"120","endLine":31,"endColumn":10,"suggestions":"141"},{"ruleId":"118","severity":1,"message":"142","line":17,"column":7,"nodeType":"120","endLine":17,"endColumn":9,"suggestions":"143"},"no-native-reassign",["144"],"no-negated-in-lhs",["145"],["144"],["145"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'token' and 'updateApp'. Either include them or remove the dependency array. If 'updateApp' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["146"],"React Hook useEffect has missing dependencies: 'handleNewGoalCreation' and 'newTask'. Either include them or remove the dependency array.",["147"],"no-unused-vars","'username' is assigned a value but never used.","Identifier","unusedVar","'email' is assigned a value but never used.","'setUpdateColor' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'blankGoal' and 'goals'. Either include them or remove the dependency array. If 'setTheGoal' needs the current value of 'goals', you can also switch to useReducer instead of useState and read 'goals' in the reducer.",["148"],"'DeadlineBox' is defined but never used.","React Hook useEffect has missing dependencies: 'fetch', 'initialFetch', 'source', and 'state'. Either include them or remove the dependency array. You can also do a functional update 'updateState(s => ...)' if you only need 'state' in the 'updateState' call.",["149"],"'removeItem' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'loginIdentifier' and 'store'. Either include them or remove the dependency array. If 'setLoginName' needs the current value of 'loginIdentifier', you can also switch to useReducer instead of useState and read 'loginIdentifier' in the reducer.",["150"],["144"],["145"],"'forceUpdate' is assigned a value but never used.",["151"],"React Hook useEffect has a missing dependency: 'callback'. Either include it or remove the dependency array.",["152"],"no-global-assign","no-unsafe-negation",{"desc":"153","fix":"154"},{"desc":"155","fix":"156"},{"desc":"157","fix":"158"},{"desc":"159","fix":"160"},{"desc":"161","fix":"162"},{"desc":"161","fix":"163"},{"desc":"164","fix":"165"},"Update the dependencies array to be: [theGoals, token, updateApp]",{"range":"166","text":"167"},"Update the dependencies array to be: [enterKeyIsDown, handleNewGoalCreation, newTask]",{"range":"168","text":"169"},"Update the dependencies array to be: [blankGoal, goalSelected, goals]",{"range":"170","text":"171"},"Update the dependencies array to be: [configHash, fetch, initialFetch, source, state]",{"range":"172","text":"173"},"Update the dependencies array to be: [loginIdentifier, store]",{"range":"174","text":"175"},{"range":"176","text":"175"},"Update the dependencies array to be: [callback]",{"range":"177","text":"178"},[2180,2190],"[theGoals, token, updateApp]",[3440,3456],"[enterKeyIsDown, handleNewGoalCreation, newTask]",[1446,1460],"[blankGoal, goalSelected, goals]",[1322,1334],"[configHash, fetch, initialFetch, source, state]",[1306,1308],"[loginIdentifier, store]",[1306,1308],[488,490],"[callback]"]